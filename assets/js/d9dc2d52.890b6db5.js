"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7551],{3905:(e,t,n)=>{n.d(t,{Zo:()=>_,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},_=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,_=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=i,u=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return n?a.createElement(u,l(l({ref:t},_),{},{components:n})):a.createElement(u,l({ref:t},_))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},l="Modulator",o={unversionedId:"examples/MOD/index",id:"examples/MOD/index",title:"Modulator",description:"Introduction",source:"@site/docs/examples/MOD/index.md",sourceDirName:"examples/MOD",slug:"/examples/MOD/",permalink:"/my-website/docs/examples/MOD/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/MOD/index.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesSidebar",previous:{title:"MOD",permalink:"/my-website/docs/category/mod"},next:{title:"Lasers",permalink:"/my-website/docs/category/lasers"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Simulation Methods",id:"simulation-methods",level:2},{value:"Simulation Structure",id:"simulation-structure",level:2},{value:"1. Basic Operations",id:"1-basic-operations",level:3},{value:"2. Code description",id:"2-code-description",level:3},{value:"2.1 Import Modules",id:"21-import-modules",level:4},{value:"2.2 Define Parameters",id:"22-define-parameters",level:4},{value:"2.2.1 General Parameters",id:"221-general-parameters",level:5},{value:"2.2.2 Structure Geometry",id:"222-structure-geometry",level:5},{value:"2.2.3 Electrical Simulation Boundary",id:"223-electrical-simulation-boundary",level:5},{value:"2.2.4 Optical simulation Boundary",id:"224-optical-simulation-boundary",level:5},{value:"2.3 Define Engineering Function",id:"23-define-engineering-function",level:4},{value:"2.3.1 Creat Project",id:"231-creat-project",level:5},{value:"2.3.2 Set Material",id:"232-set-material",level:5},{value:"2.3.3 Define structure",id:"233-define-structure",level:5},{value:"2.3.4 Add Doping",id:"234-add-doping",level:5},{value:"2.3.5 Set Optical Simulate Boundry",id:"235-set-optical-simulate-boundry",level:5},{value:"2.3.6 Add Mesh",id:"236-add-mesh",level:5},{value:"2.3.7 Define Structure File",id:"237-define-structure-file",level:5},{value:"2.3.8 Set Simulate Solver",id:"238-set-simulate-solver",level:5},{value:"2.6  Set Simulation",id:"26--set-simulation",level:5},{value:"2.7 Retrieve Result",id:"27-retrieve-result",level:5},{value:"3 Output Result",id:"3-output-result",level:3},{value:"Modulation efficiency",id:"modulation-efficiency",level:2},{value:"1. Basic Operations",id:"1-basic-operations-1",level:3},{value:"2. Code description",id:"2-code-description-1",level:3},{value:"Capacitance And Resistance",id:"capacitance-and-resistance",level:2},{value:"1. Basic Operations",id:"1-basic-operations-2",level:3},{value:"2. Code description",id:"2-code-description-2",level:3}],_={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modulator"},"Modulator"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"\u200b\tWe have developed an electro-optic modulator based on carrier-depletion mechanism in silicon to simulate carrier and index distribution in a global structure. The drift and diffusion of carriers result in depletion at the PN junction. Applying a reverse bias voltage at the cathode broadens the depletion region, altering the carrier concentration and modulating the material's refractive index. Gaussian doping was employed in this model. Modulation efficiency, capacitance, and resistance were calculated to analyze the electro-optic characteristics of the modulator."),(0,i.kt)("h2",{id:"simulation-methods"},"Simulation Methods"),(0,i.kt)("h2",{id:"simulation-structure"},"Simulation Structure"),(0,i.kt)("p",null,"\u200b\tThe present structural file provides a comprehensive guide for constructing a simulation structure and establishing a Gaussian doping distribution. Initially, one must construct the geometric structure of the device, incorporate materials and physical field models, specify the doping distribution, and simulation boundary conditions, and set the light source and simulation solver. Eventually, the simulation result data should be extracted and output. "),(0,i.kt)("p",null,"\u200b\tOur simulation is designed with a light source entering along the X-axis, and the primary optoelectronic characteristic analysis takes place within the three-dimensional structure on the YZ plane. Gaussian doping method is employed to enhance the bandwidth and improve the performance of high-speed devices. The FDE solver is utilized to solve the distribution of effective refractive index, and the OEedvice solver is used to solve the doping distribution of the device. Finally, we generate ad output the  distribution map iof doping and index in modulator structure."),(0,i.kt)("p",null,"Application Library path: ",(0,i.kt)("inlineCode",{parentName:"p"},":\\SDK\\V2.3.0.4\\examples\\active_demo\\doping_function\\MOD\\MOD00_structure.py")),(0,i.kt)("h3",{id:"1-basic-operations"},"1. Basic Operations"),(0,i.kt)("p",null,"\u200b\tIt is essential to incorporate materials for structure. Although module of ",(0,i.kt)("inlineCode",{parentName:"p"},"maxoptics_sdk.all")," provides default values for standard semiconductors, these values can be customized in ",(0,i.kt)("inlineCode",{parentName:"p"},"MOD_material.py")," . "),(0,i.kt)("p",null,"\u200b\tThe module of ",(0,i.kt)("inlineCode",{parentName:"p"},"basic")," specifies the electron affinity and relative dielectric permittivity of the material. It is crucial to define the mode type and parameter values, if another model is used instead of the default. The default mobility model of Silicon is ",(0,i.kt)("inlineCode",{parentName:"p"},"Analytic")," , but we use the mobility model of ",(0,i.kt)("inlineCode",{parentName:"p"},"Masetti")," in this modulator. The ",(0,i.kt)("inlineCode",{parentName:"p"},"band")," module includes the model of bandgap, bandgap narrowing , and recombination of  Auger, SRH, and Radiative. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'elec_Si_properties = {"basic": {"model": "Default",\n                                "Default": {"affinity": 4.2-1.11452/2.0, "permitti": 11.7}, "print": 1},\n                      "mobility": {"model": "Masetti",\n                                   "Masetti": {"mu_min2_h": 44.9, "mumax_e": 1471, "mumax_h": 470.5, "pc_h": 0}, "print": 1},\n                      "band": {"model": "Default",\n                               "Default": {\n                                   # DOS\n                                   "dos_formula": 2, "nc300": 3.21657e19, "nv300": 1.82868e19,\n                                   # Bandgap\n                                   "eg0": 1.16, "chi0": 4.2-1.16/2,\n                                   # Bandgap Narrowing\n                                   "bgn_model": "OldSlotboom", "e0_bgn_oldslotboom": 0.0045, "n0_bgn_oldslotboom": 1.00e17, "deg0_oldslotboom": 0,\n                                   # Auger Recombination\n                                   "augan": 2.8e-31, "augap": 9.9e-32, "augbn": 0, "augbp": 0, "augcn": 0, "augcp": 0, "aughn": 0, "aughp": 0,\n                                   # SRH Recombination\n                                   "taunmax": 3.3e-6, "taupmax": 4e-6, "nsrh_n": 7.1e15, "nsrh_p": 7.1e15, "nc_f": 1.5, "nv_f": 1.5, \n                                   # Radiative Recombination\n                                   "c_direct": 1.6e-14,}, "print": 1}}\n')),(0,i.kt)("p",null,"\u200b\tThe parameter values of ",(0,i.kt)("inlineCode",{parentName:"p"},"matparas_1550")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"matparas_1310")," are used for converting carrier distribution to a change in refractive index."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'matparas_1550 = {\n    "dn_an": -8.8e-22,\n    "dn_en": 1,\n    "dn_ap": -8.5e-18,\n    "dn_ep": 0.8,\n    "dalpha_an": 8.5e-18,\n    "dalpha_en": 1,\n    "dalpha_ap": 6.0e-18,\n    "dalpha_ep": 1\n}\n\nmatparas_1310 = {\n    "dn_an": -6.2e-22,\n    "dn_en": 1,\n    "dn_ap": -6e-18,\n    "dn_ep": 0.8,\n    "dalpha_an": 6e-18,\n    "dalpha_en": 1,\n    "dalpha_ap": 4e-18,\n    "dalpha_ep": 1\n}\n')),(0,i.kt)("h3",{id:"2-code-description"},"2. Code description"),(0,i.kt)("h4",{id:"21-import-modules"},"2.1 Import Modules"),(0,i.kt)("p",null,"\u200b\tTo begion, we need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," command to call the relevant functional modules and  parameter values of material from previously defined file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import maxoptics_sdk.all as mo\nimport os\nimport time\nfrom maxoptics_sdk.helper import timed\nfrom pathlib import Path\nfrom MOD_material import matparas_1550, matparas_1310, elec_Si_properties\n")),(0,i.kt)("h4",{id:"22-define-parameters"},"2.2 Define Parameters"),(0,i.kt)("h5",{id:"221-general-parameters"},"2.2.1 General Parameters"),(0,i.kt)("p",null,"We define these parameters for entire simulation process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'wavelength = 1.31   \negrid_local = 0.01  \nogrid_global_y = 0.02   \nogrid_global_z = 0.02   \nogrid_local = 0.002   \ntemperature = 300   \nnormal_length = 10000   \nssac_amplitude = 0.001  # V\nrun_mode = "local"\nsimu_name = "MOD00_struc"\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Units"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"wavelength"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the optical wavelength of the source beam (in the vacuum) for mono-spectral simulations.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"egrid_loacal"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the appropriate size of mesh in the Y and Z direction for overall region of FDE simulation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ogrid_global_y"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the mesh spacing in the Y direction for region of optical simulation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ogrid_global_z"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the mesh spacing in the Z direction for region of optical simulation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ogrid_local"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the mesh spacing in the Y and Z direction for local region of optical simulation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"temperature"),(0,i.kt)("td",{parentName:"tr",align:null},"K"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the temperature in Kelvin.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"normal_length"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the extent of a mesh section in the X direction.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ssac_amplitude"),(0,i.kt)("td",{parentName:"tr",align:null},"V"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"run_mode"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the simulate model.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"simu_name"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies this file name to define name of output result folder.")))),(0,i.kt)("p",null,"\u200b\tsince we explore two communication wavelength, you should define the wavelength, and use next code to choose  relavent parameters values, which we defines in ",(0,i.kt)("inlineCode",{parentName:"p"},"MOD_material.py")," ."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"if wavelength > 1.4:\n    Si_index_vs_doping = matparas_1550\nelse:\n    Si_index_vs_doping = matparas_1310\n")),(0,i.kt)("h5",{id:"222-structure-geometry"},"2.2.2 Structure Geometry"),(0,i.kt)("p",null,"\u200b\tYou should define the location of material in X, Y and Z direction about the modulator structure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"st_x_min = -0.3\nst_x_max = 0.3\nst_x_mean = 0.5*(st_x_min+st_x_max)\nst_x_span = st_x_max-st_x_min\n\nst_y_min = -5\nst_y_max = 5\nst_y_mean = 0.5*(st_y_min+st_y_max)\nst_y_span = st_y_max-st_y_min\n\nst_z_min = -0.3\nst_z_max = 0.8\n\nslab_height = 0.09\nrg_height = 0.22\nrg_width = 0.5\nelec_height = 0.5\nelec_width = 1.2\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Units"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"x_min, x_max, y_min, y_max, z_min, z_max"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the minimum or maximum value in X/Y boundary of modulator structure.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"x_mean, x_span, y_mean, y_span, z_mean, z_span"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the center or spacing value in X/Y boundary of modulator structure.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"slab_height"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the height of slab layer in Z direction.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rg_height"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the height of RG layer in Z direction.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"elec_height, elec_width"),(0,i.kt)("td",{parentName:"tr",align:null},"um"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the Z-direction height and Y-direction width of electron.")))),(0,i.kt)("h5",{id:"223-electrical-simulation-boundary"},"2.2.3 Electrical Simulation Boundary"),(0,i.kt)("p",null,"\u200b\tSpecifies the  boundary of electrical simulation for ",(0,i.kt)("inlineCode",{parentName:"p"},"OEDevice")," solver in 3D direction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"oe_x_min = -0.3\noe_x_max = 0.3\noe_x_mean = 0.5*(oe_x_min+oe_x_max)\noe_x_span = oe_x_max-oe_x_min\n\noe_y_min = -4.9\noe_y_max = 4.9\noe_y_mean = 0.5*(oe_y_min+oe_y_max)\noe_y_span = oe_y_max-oe_y_min\n\noe_z_min = -0.3\noe_z_max = 0.8\noe_z_mean = 0.5*(oe_z_min+oe_z_max)\noe_z_span = oe_z_max-oe_z_min\n")),(0,i.kt)("p",null,"\u200b\tSpecifies the  concentration of uniform doping by ",(0,i.kt)("inlineCode",{parentName:"p"},"constant_con")," and its boundary throuth ",(0,i.kt)("inlineCode",{parentName:"p"},"center")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"span")," in Y-Z plane."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"constant_y_center = 0\nconstant_y_span = 10\nconstant_z_center = 0.1\nconstant_z_span = 0.3\nconstant_con = 1e15\n")),(0,i.kt)("p",null,"\u200b\tSpecifies the  junction width and peak concentration of gaussian doping by",(0,i.kt)("inlineCode",{parentName:"p"},"_jw")," and  ",(0,i.kt)("inlineCode",{parentName:"p"},"_con")," , its boundary throuth ",(0,i.kt)("inlineCode",{parentName:"p"},"center")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"span")," in Y-Z plane of slab."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"p_slab_y_center = -2.575\np_slab_y_span = 4.85\np_slab_z_center = -0.105\np_slab_z_span = 0.39\np_slab_jw = 0.1\np_slab_con = 7e17\n\nn_slab_y_center = 2.575\nn_slab_y_span = 4.85\nn_slab_z_center = -0.105\nn_slab_z_span = 0.39\nn_slab_jw = 0.1\nn_slab_con = 5e17\n")),(0,i.kt)("p",null,"\u200b\tSpecifies the doping region of high concentration in slab layer, including boundary\u3001junction width and peak concentration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"p_plus_y_center = -3.5\np_plus_y_span = 3\np_plus_z_center = -0.04\np_plus_z_span = 0.52\np_plus_jw = 0.1\np_plus_con = 1e19\n\nn_plus_y_center = 3.5\nn_plus_y_span = 3\nn_plus_z_center = -0.04\nn_plus_z_span = 0.52\nn_plus_jw = 0.1\nn_plus_con = 1e19\n")),(0,i.kt)("p",null,"\u200b\tSpecifies the doping region of high concentration in waveguide structure, including boundary\u3001junction width and peak concentration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"p_wg_y_center = -0.12\np_wg_y_span = 0.36\np_wg_z_center = 0.1275\np_wg_z_span = 0.255\np_wg_jw = 0.12\np_wg_con = 5e17\n\nn_wg_y_center = 0.105\nn_wg_y_span = 0.29\nn_wg_z_center = 0.12\nn_wg_z_span = 0.235\nn_wg_jw = 0.11\nn_wg_con = 7e17\n")),(0,i.kt)("h5",{id:"224-optical-simulation-boundary"},"2.2.4 Optical simulation Boundary"),(0,i.kt)("p",null,"\u200b\tSpecifies the boundary of optical simulation  for ",(0,i.kt)("inlineCode",{parentName:"p"},"FDE")," solver in 3D direction. We only consider optical characteristic of Y-Z plane, since the light travels along X-axis."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"x_min = 0\nx_max = 0\nx_mean = 0.5*(x_min+x_max)\nx_span = x_max-x_min\n\ny_min = -2.3\ny_max = 2.3\ny_mean = 0.5*(y_min+y_max)\ny_span = y_max-y_min\n\nz_min = -1.5\nz_max = 1.5\nz_mean = 0.5*(z_min+z_max)\nz_span = z_max-z_min\n")),(0,i.kt)("h4",{id:"23-define-engineering-function"},"2.3 Define Engineering Function"),(0,i.kt)("p",null,"\u200b\tTo facilitate the calling of other simulation scripts, it is recommended to define a function that can set materials, model, dope, and add boundary conditions."),(0,i.kt)("h5",{id:"231-creat-project"},"2.3.1 Creat Project"),(0,i.kt)("p",null,"\u200b\tCreate a new simulation project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def mod_project(project_name, run_mode, st_type):\n    pj = mo.Project(name=project_name, location=run_mode)\n")),(0,i.kt)("h5",{id:"232-set-material"},"2.3.2 Set Material"),(0,i.kt)("p",null,"\u200b\tThe electrical and optical parameters of SiO2\u3001Aluminium and Si materials in the material library can be accessed. If the parameters defined in the Si section of ",(0,i.kt)("inlineCode",{parentName:"p"},"MOD_material.py"),"  are different from the default parameters in the material library, the former will be prioritized. In the overlapping area of the materials, the material with a higher order value will take precedence over the one with a lower value. If the values are the same, the material defined later will override the one defined earlier. It is worth noting that the material Aluminium will call the PEC material library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'mt = pj.Material()\n    mt.add_lib(name="mat_sio2", data=mo.OE_Material.SiO2, order=1)\n    mt.add_lib(name="mat_al", data=mo.OE_Material.Al, order=2)\n    mt.add_lib(name="mat_si", data=mo.OE_Material.Si, order=2, override=elec_Si_properties)\n    mt["mat_sio2"].set_optical_material(data=mo.Material.SiO2_Palik)\n    mt["mat_si"].set_optical_material(data=mo.Material.Si_Palik)\n    mt["mat_al"].set_optical_material(data=mo.Material.PEC)\n')),(0,i.kt)("h5",{id:"233-define-structure"},"2.3.3 Define structure"),(0,i.kt)("p",null,"\u200b\tTo begin with, it is advisable to define the geometric region of the device structure and add materials to this region. The background material, which is usually Air or SiO2, should be added first. You can choose the geometry of structure in ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," ,  call materila library added above by ",(0,i.kt)("inlineCode",{parentName:"p"},"material")," ."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},' st = pj.Structure(mesh_type="curve_mesh", mesh_factor=1.4, background_material=mt["mat_sio2"])\n\n    st.add_geometry(name="BOX", type="Rectangle", property={\n        "material": {"material": mt["mat_sio2"]},\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": st_y_mean, "y_span": st_y_span, "z_min": st_z_min, "z_max": slab_height}})\n\n    st.add_geometry(name="SOX", type="Rectangle", property={\n        "material": {"material": mt["mat_sio2"]},\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": st_y_mean, "y_span": st_y_span, "z_min": slab_height, "z_max": st_z_max}})\n\n    st.add_geometry(name="Slab", type="Rectangle", property={\n        "material": {"material": mt["mat_si"]},\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": st_y_mean, "y_span": st_y_span, "z_min": 0, "z_max": slab_height}})\n\n    st.add_geometry(name="Rg", type="Rectangle", property={\n        "material": {"material": mt["mat_si"]},\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": 0, "y_span": rg_width, "z_min": slab_height, "z_max": rg_height}})\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Units"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Restricts the applicability of the statement to regions with the specified name.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"material"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Restricts the applicability of the statement to regions of the specified material.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"type"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the  geometry of specified region.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"geometry"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the boundary of specified region in 3D direction")))),(0,i.kt)("p",null,"\u200b\tWe offer several alternative electrode region for establishing the electrical simulation area."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'if st_type == "normal":\n        st.add_geometry(name="Anode", type="Rectangle", property={\n            "material": {"material": mt["mat_al"]},\n            "geometry": {"x": st_x_mean, "x_span": st_x_span, "y_min": st_y_min, "y_max": st_y_min + elec_width,\n                         "z_min": slab_height, "z_max": slab_height + elec_height}})\n\n        st.add_geometry(name="Cathode", type="Rectangle", property={\n            "material": {"material": mt["mat_al"]},\n            "geometry": {"x": st_x_mean, "x_span": st_x_span, "y_min": st_y_max - elec_width, "y_max": st_y_max,\n                         "z_min": slab_height, "z_max": slab_height + elec_height}})\n\n    elif st_type == "slab_N":\n        st.add_geometry(name="Cathode", type="Rectangle", property={\n            "material": {"material": mt["mat_al"]},\n            "geometry": {"x": st_x_mean, "x_span": st_x_span, "y_min": st_y_max - elec_width, "y_max": st_y_max,\n                         "z_min": slab_height, "z_max": slab_height + elec_height}})\n\n        st.add_geometry(name="Ground", type="Rectangle", property={\n            "material": {"material": mt["mat_al"]},\n            "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": st_y_mean, "y_span": rg_width, "z_min": 0, "z_max": rg_height}})\n\n    elif st_type == "slab_P":\n        st.add_geometry(name="Anode", type="Rectangle", property={\n            "material": {"material": mt["mat_al"]},\n            "geometry": {"x": st_x_mean, "x_span": st_x_span, "y_min": st_y_min, "y_max": st_y_min + elec_width,\n                         "z_min": slab_height, "z_max": slab_height + elec_height}})\n\n        st.add_geometry(name="Ground", type="Rectangle", property={\n            "material": {"material": mt["mat_al"]},\n            "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": st_y_mean, "y_span": rg_width, "z_min": 0, "z_max": rg_height}})\n    else:\n        print("st_type must be chosen from \'normal\', \'slab_N\', \'slab_P\'")\n        raise\n')),(0,i.kt)("h5",{id:"234-add-doping"},"2.3.4 Add Doping"),(0,i.kt)("p",null,"\u200b\tYou should define the basic parameters of doping module, such as  type\u3001region and model. Then define source face\u3001junction width peak concentration and  reference concentration in gaussian doping, or only concenteration in uniform doping.  ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," specifies the n-type or donor dopant in ",(0,i.kt)("inlineCode",{parentName:"p"},'"n"')," , and  p-type or acceptor dopant in ",(0,i.kt)("inlineCode",{parentName:"p"},'"p"')," , which may be used with gaussian and uniform prodile types.  ",(0,i.kt)("inlineCode",{parentName:"p"},"ref_concentration")," specifies the XXX."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'st.add_doping(name="background_doping", type="p", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": constant_y_center, "y_span": constant_y_span, "z": constant_z_center, "z_span": constant_z_span},\n        "general": {"distribution_function": "constant", "concentration": constant_con}})\n\n    st.add_doping(name="p_slab", type="p", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": p_slab_y_center, "y_span": p_slab_y_span, "z": p_slab_z_center, "z_span": p_slab_z_span},\n        "general": {"distribution_function": "gaussian", "source_face": "upper_z", "junction_width": p_slab_jw, "concentration": p_slab_con, "ref_concentration": 1e6}})\n\n    st.add_doping(name="n_slab", type="n", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": n_slab_y_center, "y_span": n_slab_y_span, "z": n_slab_z_center, "z_span": n_slab_z_span},\n        "general": {"distribution_function": "gaussian", "source_face": "upper_z", "junction_width": n_slab_jw, "concentration": n_slab_con, "ref_concentration": 1e6}})\n\n    st.add_doping(name="p_plus", type="p", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": p_plus_y_center, "y_span": p_plus_y_span, "z": p_plus_z_center, "z_span": p_plus_z_span},\n        "general": {"distribution_function": "gaussian", "source_face": "upper_z", "junction_width": p_plus_jw, "concentration": p_plus_con, "ref_concentration": 1e6}})\n\n    st.add_doping(name="n_plus", type="n", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": n_plus_y_center, "y_span": n_plus_y_span, "z": n_plus_z_center, "z_span": n_plus_z_span},\n        "general": {"distribution_function": "gaussian", "source_face": "upper_z", "junction_width": n_plus_jw, "concentration": n_plus_con, "ref_concentration": 1e6}})\n\n    st.add_doping(name="p_wg", type="p", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": p_wg_y_center, "y_span": p_wg_y_span, "z": p_wg_z_center, "z_span": p_wg_z_span},\n        "general": {"distribution_function": "gaussian", "source_face": "lower_y", "junction_width": p_wg_jw, "concentration": p_wg_con, "ref_concentration": 1e6}})\n\n    st.add_doping(name="n_wg", type="n", property={\n        "geometry": {"x": st_x_mean, "x_span": st_x_span, "y": n_wg_y_center, "y_span": n_wg_y_span, "z": n_wg_z_center, "z_span": n_wg_z_span},\n        "general": {"distribution_function": "gaussian", "source_face": "upper_y", "junction_width": n_wg_jw, "concentration": n_wg_con, "ref_concentration": 1e6}})\n\n')),(0,i.kt)("h5",{id:"235-set-optical-simulate-boundry"},"2.3.5 Set Optical Simulate Boundry"),(0,i.kt)("p",null,"\u200b\tYou should set the boundry of optical simulation for ",(0,i.kt)("inlineCode",{parentName:"p"},"FDE")," solver."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'st.OBoundary(property={\n        "geometry": {"x": x_mean, "y": y_mean, "z": z_mean, "x_span": x_span, "y_span": y_span, "z_span": z_span},\n        "boundary": {"y_min": "PEC", "y_max": "PEC", "z_min": "PEC", "z_max": "PEC"}})\n')),(0,i.kt)("h5",{id:"236-add-mesh"},"2.3.6 Add Mesh"),(0,i.kt)("p",null,"\u200b\tWhen specifying meshes, a balance must be struck between accuracy and numerical efficiency. Achieving accuracy requires a fine mesh that can resolve all significant features of the solution, while numerical efficiency requires a coarse mesh that minimizes the total number of grid points.  "),(0,i.kt)("p",null,"\u200b\tDue to the relatively simple structure of this modulator, a rough initial mesh can be established for electrical and optical simulation of the entire device. In order to obtain more accurate calculation results and better convergence, the ",(0,i.kt)("inlineCode",{parentName:"p"},"emesh"),"  module is employed to refine the mesh of the regions with significant electrical characteristics."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'st.add_mesh(name="OMesh_Local", property={\n        "geometry": {"x": x_mean, "x_span": x_span, "y": 0, "y_span": 2*rg_width, "z_min": -0.5*rg_height, "z_max": 1.5*rg_height},\n        "general": {"dy": ogrid_local, "dz": ogrid_local}})\nst.add_emesh(name="EMesh_Local", property={\n                 "y_min": st_y_min, "y_max": st_y_max, "z_min": st_z_min, "z_max": st_z_max, "mesh_size": egrid_local})\n')),(0,i.kt)("h5",{id:"237-define-structure-file"},"2.3.7 Define Structure File"),(0,i.kt)("p",null,"\u200b\tYou should call the previous defined simulation module and define the name and path of the output file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'return pj\n\n@timed\ndef preview():\n    pj = mod_project(project_name=simu_name + time_str, run_mode="local", st_type="normal")\n\n    plot_path = str(Path(__file__).parent.as_posix()) + "/plots/"\n    if not os.path.exists(plot_path):\n        os.makedirs(plot_path)\n')),(0,i.kt)("h5",{id:"238-set-simulate-solver"},"2.3.8 Set Simulate Solver"),(0,i.kt)("p",null," \t add electrical and optical silmulation solver for output structure file. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'simu = pj.Simulation()\nsimu.add(name="preview_fde", type="AFDE", property={\n        "mesh_settings": {"global_mesh_uniform_grid": {"dy": ogrid_global_y, "dz": ogrid_global_z}},\n        "fde_analysis": {"modal_analysis": {"calculate_modes": False, "mesh_structure": False, "wavelength": wavelength},\n                         "modulator_analysis": {"modulator_analysis": True, "wavelength": wavelength, "np_path": ""}},\n        "other": {**Si_index_vs_doping}})\n\nsimu.add(name="preview_oedevice", type="OEDevice", property={\n        "geometry": {"dimension": "2d_x_normal", "x": oe_x_mean, "x_span": 0, "y": oe_y_mean, "y_span": oe_y_span, "z_min": oe_z_min, "z_max": oe_z_max},\n        "general": {"norm_length": normal_length, "solver_mode": "steady_state", "simulation_temperature": temperature},\n        "advanced": {"non_linear_solver": "Newton", "linear_solver": "MUMPS", "max_iterations": 50}})\n\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'simu["preview_oedevice"].run_doping(name="x_in", property={\n        "geometry": {"dimension": "2d_x_normal", "x": oe_x_mean, "x_span": 0, "y": oe_y_mean, "y_span": oe_y_span, "z_min": oe_z_min, "z_max": oe_z_max}},\n        norm="log", scale="equal", superimpose=False, show=False,\n        material_list=["Si"], cmin=8e14, savepath=plot_path + simu_name + "_" + time_str + "doping")\n\nsimu["preview_fde"].run_index(name="index_preview_x_0", property={\n        "geometry": {"x": 0, "x_span": 0, "y": 0, "y_span": 6, "z": 0.3, "z_span": 1}},\n        savepath=plot_path + simu_name + "_" + time_str + "Index", export_csv=False, show=False)\n')),(0,i.kt)("h5",{id:"26--set-simulation"},"2.6  Set Simulation"),(0,i.kt)("h5",{id:"27-retrieve-result"},"2.7 Retrieve Result"),(0,i.kt)("h3",{id:"3-output-result"},"3 Output Result"),(0,i.kt)("p",null,"\u200b\t"),(0,i.kt)("h2",{id:"modulation-efficiency"},"Modulation efficiency"),(0,i.kt)("h3",{id:"1-basic-operations-1"},"1. Basic Operations"),(0,i.kt)("h3",{id:"2-code-description-1"},"2. Code description"),(0,i.kt)("h2",{id:"capacitance-and-resistance"},"Capacitance And Resistance"),(0,i.kt)("p",null,"\u200b\tCapacitance and resistance play crucial roles in determining the performance of devices. Optimal capacitance values enable the modulator to selectively allow or block signals within specific frequency ranges, facilitating signal coupling. Suitable resistance values enable adjustment of signal amplitude and modulation current determination."),(0,i.kt)("h3",{id:"1-basic-operations-2"},"1. Basic Operations"),(0,i.kt)("h3",{id:"2-code-description-2"},"2. Code description"))}d.isMDXComponent=!0}}]);