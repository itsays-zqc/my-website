"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9141],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>_});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=s(a),c=r,_=u["".concat(p,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(_,o(o({ref:t},m),{},{components:a})):n.createElement(_,o({ref:t},m))}));function _(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},72147:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={},o="Extract result",i={unversionedId:"manual/SDK/9Extract",id:"manual/SDK/9Extract",title:"Extract result",description:"|                        Parameters                        |                         Description                          |",source:"@site/docs/manual/SDK/9Extract.md",sourceDirName:"manual/SDK",slug:"/manual/SDK/9Extract",permalink:"/docs/manual/SDK/9Extract",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"Analysis",permalink:"/docs/manual/SDK/8Analysis"}},p={},s=[{value:"8.1 FDE",id:"81-fde",level:2},{value:"8.1.1 Calculate mode result",id:"811-calculate-mode-result",level:3},{value:"8.1.2 Far-field FDE result",id:"812-far-field-fde-result",level:3},{value:"8.1.3 Mesh structure result",id:"813-mesh-structure-result",level:3},{value:"8.1.4 Frequency analysis result",id:"814-frequency-analysis-result",level:3},{value:"8.2 EME",id:"82-eme",level:2},{value:"8.2.1 EME propagate:facet data",id:"821-eme-propagatefacet-data",level:3},{value:"8.2.2 EME propagate:monitor",id:"822-eme-propagatemonitor",level:3},{value:"8.2.3 Propagation sweep:monitor",id:"823-propagation-sweepmonitor",level:3},{value:"8.2.4 Wavelength sweep:monitor",id:"824-wavelength-sweepmonitor",level:3},{value:"8.2.5 EME propagate:smatrix",id:"825-eme-propagatesmatrix",level:3},{value:"8.2.6 EME propagate:port mode infomation",id:"826-eme-propagateport-mode-infomation",level:3},{value:"8.2.7 EME propagate:port mesh structure",id:"827-eme-propagateport-mesh-structure",level:3},{value:"8.2.8 EME propagate:cell mesh structure",id:"828-eme-propagatecell-mesh-structure",level:3},{value:"8.2.9 EME propagate:port overlap",id:"829-eme-propagateport-overlap",level:3},{value:"8.2.10 EME propagate:cell mode information",id:"8210-eme-propagatecell-mode-information",level:3},{value:"8.2.11 EME propagate:propagation field",id:"8211-eme-propagatepropagation-field",level:3},{value:"8.2.12 EME propagate:internal S",id:"8212-eme-propagateinternal-s",level:3},{value:"8.2.13 EME propagate:cell p matrix/cell overlap/cell S/propagation S",id:"8213-eme-propagatecell-p-matrixcell-overlapcell-spropagation-s",level:3},{value:"8.3 FDTD",id:"83-fdtd",level:2},{value:"8.3.1 FDTD:power monitor",id:"831-fdtdpower-monitor",level:3},{value:"8.3.2 FDTD:time monitor",id:"832-fdtdtime-monitor",level:3},{value:"8.3.3 FDTD:mode expansion",id:"833-fdtdmode-expansion",level:3},{value:"8.3.6 FDTD:mode expansion information",id:"836-fdtdmode-expansion-information",level:3},{value:"8.3.4 FDTD:port mode information",id:"834-fdtdport-mode-information",level:3},{value:"8.3.5 FDTD:mode source information",id:"835-fdtdmode-source-information",level:3},{value:"8.4 Sweep",id:"84-sweep",level:2},{value:"8.4.1 parameter sweep",id:"841-parameter-sweep",level:3},{value:"8.4.2 smatrix sweep",id:"842-smatrix-sweep",level:3},{value:"8.5 DDM",id:"85-ddm",level:2},{value:"8.5.1 Extract generation rate",id:"851-extract-generation-rate",level:3},{value:"Example of extracting generation rate",id:"example-of-extracting-generation-rate",level:4},{value:"8.5.2 Extract electrode result",id:"852-extract-electrode-result",level:3},{value:"Example of extracting electrode result",id:"example-of-extracting-electrode-result",level:4},{value:"8.5.3 Extract results of electrical monitor",id:"853-extract-results-of-electrical-monitor",level:3},{value:"Example of extracting electrical monitor result",id:"example-of-extracting-electrical-monitor-result",level:4},{value:"8.5.4 Extract results of modulator analysis",id:"854-extract-results-of-modulator-analysis",level:3},{value:"Example of extracting modulator analysis result",id:"example-of-extracting-modulator-analysis-result",level:4}],m={toc:s},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extract-result"},"Extract result"),(0,r.kt)("font",{face:"Calibri"},(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Parameters")),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"PowerAttributes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"The following are power related physical attributes. Literal",'["E", "Ex", "Ey", "Ez", "H", "Hx", "Hy", "Hz", "Px", "Py", "Pz", "Energy density"]')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"ModeAttributes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"The following are mode related physical attributes. Literal",'["a", "b", "n", "p", "N", "P", "t_forward", "t_backward", "T_forward", "T_backward"]')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"The following are other attributes which can be extracted. Literal",'["TEratio", "neff_real", "neff_imag", "ng_real", "ng_imag", "wavelength_nm", "loss_dBpcm"]')))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Parameters")),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"data"),(0,r.kt)("td",{parentName:"tr",align:"center"},"To decide what type/field data will be extracted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"export_csv"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Whether to export a csv. Default as False.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"show"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Whether to show the picture. If set to False, the picture will be saved instead. Default as False.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"savepath"),(0,r.kt)("td",{parentName:"tr",align:"center"},'The save path of picture . Default as "a".')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"target"),(0,r.kt)("td",{parentName:"tr",align:"center"},"How the data is organized/displayed. Default as None.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"attribute"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Which attribute will extracted, in few cases this parameter is not needed. Default as None.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"real"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Whether to add real part of data. Default as True.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"imag"),(0,r.kt)("td",{parentName:"tr",align:"center"},'Whether to add imag part of data. If both real and imag is activate, "ABS" data will be extracted. Default as True.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"plot_x"),(0,r.kt)("td",{parentName:"tr",align:"center"},"The selection of x axis of heatmap or line plot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"plot_y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"The selection of y axis of heatmap.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"**kwargs"),(0,r.kt)("td",{parentName:"tr",align:"center"},'Other visualization parameters. For example: "monitor_name" , "mode_expansion_name" for "fdtd:mode_expansion".')))),(0,r.kt)("h2",{id:"81-fde"},"8.1 FDE"),(0,r.kt)("p",null,"In this section, we will provide examples for extracting simulation result data from FDE simulation, along with a description table of parameters."),(0,r.kt)("h3",{id:"811-calculate-mode-result"},"8.1.1 Calculate mode result"),(0,r.kt)("p",null,"Get the result of calculated mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nextract(\n        self,\n        data: Literal["fdtd:power_monitor"],\n        savepath: str,\n        target: Optional[enums.TargetType],\n        attribute: Optional[str],\n        real: bool,\n        imag: bool,\n        monitor_name: str,\n        wavelength: Optional[Union[StrictInt, StrictStr]] = None,\n        plot_x: Optional[str] = None,\n        plot_y: Optional[str] = None,\n        show: bool = False,\n        export_csv: bool = False,\n        export_mat: bool = False,\n        export_zbf: bool = False,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'result_fde.extract(data="calculate_modes", savepath=f"{plot_path}{k}_mode{m}",\n                   attribute="E", mode=m, real=True, imag=True, **export_options, show=False)\n')),(0,r.kt)("h3",{id:"812-far-field-fde-result"},"8.1.2 Far-field FDE result"),(0,r.kt)("p",null,"Get the result of  calculated far-field FDE."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        # target - table\n        data: Literal["farfield_fde"],\n        attribute: PowerAttributes,\n        \n        show=False, \n        export_csv=False, export_mat=False, export_zbf=False, real=True, imag=True, savepath: Any = "a",\n        mode: int,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'fde_res.extract(data="farfield_fde", savepath=f"{plot_path}05_{simu_name}_far_field",\n                                attribute="E", mode=0, export_csv=True)\n')),(0,r.kt)("h3",{id:"813-mesh-structure-result"},"8.1.3 Mesh structure result"),(0,r.kt)("p",null,"To extract the result of meshing structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["mesh_structure"],\n        savepath:Any = "a",\n        target: Literal["intensity"] = "intensity",\n        export_csv=False, export_mat=False, export_zbf=False,\n        show=False,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'simu.add(name=simu_name+"_cal_mode", type="mode_selection:user_select", simulation_name=simu_name, source_name="source",\n                 property={"modal_analysis": {"mesh_structure": True, "calculate_modes": True,\n                                              "wavelength": wavelength, "number_of_trial_modes": 10, "search": "max_index", "calculate_group_index": True}})\n')),(0,r.kt)("h3",{id:"814-frequency-analysis-result"},"8.1.4 Frequency analysis result"),(0,r.kt)("p",null,"To extract the result of frequency analysis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        target: Literal["line"] = "line",\n        data: Literal["frequency_analysis"],\n        attribute: Literal["neff", "group_index", "loss", "polarization"],\n        \n        export_csv=False, export_mat=False, export_zbf=False, \n        show=False, \n        real=True, \n        imag=True, \n        savepath:Any = "a",\n        plot_x: OptStr=None\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'result_fde.extract(data="frequency_analysis", savepath=f"{plot_path}{k}_freq_sweep_neff",\n                                   attribute="neff", real=True, imag=True, export_csv=True, export_mat=True, show=False)\n\n')),(0,r.kt)("h2",{id:"82-eme"},"8.2 EME"),(0,r.kt)("p",null,"To extract the relevant data of EME module. "),(0,r.kt)("h3",{id:"821-eme-propagatefacet-data"},"8.2.1 EME propagate:facet data"),(0,r.kt)("p",null,"Get the result of calculated facet data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n            self,\n            *,\n            data: Literal[\n                "eme_propagate:facet_data",\n            ],\n            export_csv=False, export_mat=False, export_zbf=False, real=True, imag=True, savepath: Any = "a",\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="eme_propagate:facet_data", savepath=plot_path, real=True, imag=True, export_csv=True)\n')),(0,r.kt)("h3",{id:"822-eme-propagatemonitor"},"8.2.2 EME propagate:monitor"),(0,r.kt)("p",null,"Get the result of monitor data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:monitor",\n        ],\n        attribute: PowerAttributes,\n        monitor_name: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(\n                data="eme_propagate:monitor", savepath=plot_path + "013_eme_y_normal",\n                monitor_name="y_normal", attribute="E", export_csv=True)\n\n')),(0,r.kt)("h3",{id:"823-propagation-sweepmonitor"},"8.2.3 Propagation sweep:monitor"),(0,r.kt)("p",null,"Get the result of monitor data of propagation sweep."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal[\n            "propagation_sweep:monitor",\n        ],\n        attribute: PowerAttributes,\n        monitor_name: str,\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="eme_propagate:monitor", savepath=plot_path + "013_eme_z_normal",\n                            monitor_name="z_normal", attribute="E", export_csv=True)\n\n')),(0,r.kt)("h3",{id:"824-wavelength-sweepmonitor"},"8.2.4 Wavelength sweep:monitor"),(0,r.kt)("p",null,"Get the result of monitor data of wavelength sweep."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal[\n            "wavelength_sweep:monitor",\n        ],\n        attribute: PowerAttributes,\n        monitor_name: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="wavelength_sweep:sweep", savepath=plot_path + "20_wavelength_sweep",\n                            plot_x="wavelength", export_csv=True)\n')),(0,r.kt)("h3",{id:"825-eme-propagatesmatrix"},"8.2.5 EME propagate:smatrix"),(0,r.kt)("p",null,"Get the result of smatrix data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:smatrix",\n        ],\n        target: Literal["intensity"] = "intensity",\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="eme_propagate:smatrix", savepath=plot_path + "011_eme_smatrix_intensity",\n                            target="intensity", export_csv=True)\n')),(0,r.kt)("h3",{id:"826-eme-propagateport-mode-infomation"},"8.2.6 EME propagate:port mode infomation"),(0,r.kt)("p",null,"Get the result of port mode data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        # target - intensity\n        data: Literal["eme_propagate:port_mode_info"],\n        target: Literal["intensity"] = "intensity",\n        attribute: Literal["E", "H"],\n        port_name: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n        mode: Any = None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="eme_propagate:smatrix", savepath=plot_path + "011_eme_smatrix_intensity",\n                            target="intensity", export_csv=True)\n')),(0,r.kt)("h3",{id:"827-eme-propagateport-mesh-structure"},"8.2.7 EME propagate:port mesh structure"),(0,r.kt)("p",null,"Get the result of port mesh structure data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        # target - intensity\n        data: Literal["eme_propagate:port_mesh_structure"],\n        port_name: str,\n        target: Literal["line", "intensity"] = "intensity",\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="eme_propagate:port_mesh_structure",\n                                      savepath=f"{plot_path}{kL[3]}_eme_structure_{port_name}",\n                                      port_name=port_name, target="intensity",\n                                      # plot_x="y", plot_y="z", export_csv=False, show=False\n                                      )\n')),(0,r.kt)("h3",{id:"828-eme-propagatecell-mesh-structure"},"8.2.8 EME propagate:cell mesh structure"),(0,r.kt)("p",null,"Get the result of cell mesh structure data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:cell_mesh_structure",\n        ],\n        target: Literal["intensity", "line"],\n        cell_params: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'eme_res.extract(data="eme_propagate:cell_mesh_structure",\n                                      savepath=f"{plot_path}{kL[4]}_eme_c{cell_index}_index",\n                                      cell_params="c" + str(cell_index), target="intensity", plot_x="y", plot_y="z",\n                                      # export_csv=False, show=False\n                                      )\n')),(0,r.kt)("h3",{id:"829-eme-propagateport-overlap"},"8.2.9 EME propagate:port overlap"),(0,r.kt)("p",null,"Get the result of port overlap data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:port_overlap",\n        ],\n        target: Literal["line"] = "line",\n        port_name: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    ) \n')),(0,r.kt)("h3",{id:"8210-eme-propagatecell-mode-information"},"8.2.10 EME propagate:cell mode information"),(0,r.kt)("p",null,"Get the result of cell mode information of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        target: Literal["intensity"] = "intensity",\n        data: Literal[\n            "eme_propagate:cell_mode_info",\n        ],\n        attribute: Literal["E", "H"],\n        cell_params: str,\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n        mode: Any = None,\n    )\n')),(0,r.kt)("h3",{id:"8211-eme-propagatepropagation-field"},"8.2.11 EME propagate:propagation field"),(0,r.kt)("p",null,"Get the result of propagation field of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:prop_field",\n        ],\n        # target: intensity",\n        attribute:PowerAttributes,\n        cell_params: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("h3",{id:"8212-eme-propagateinternal-s"},"8.2.12 EME propagate:internal S"),(0,r.kt)("p",null,"Get the result of internal S data of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:internal_s",\n        ],\n        target: Literal["intensity"] = "intensity",\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    ) \n')),(0,r.kt)("h3",{id:"8213-eme-propagatecell-p-matrixcell-overlapcell-spropagation-s"},"8.2.13 EME propagate:cell p matrix/cell overlap/cell S/propagation S"),(0,r.kt)("p",null,"Get the result of cell p matrix/cell overlap/cell S/propagation S\ndata of EME propagation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    def extract(\n        self,\n        *,\n        data: Literal[\n            "eme_propagate:cell_p_matrix",\n            "eme_propagate:cell_overlap",\n            "eme_propagate:cell_s",\n            "eme_propagate:prop_s",\n        ],\n        target: Literal["intensity"] = "intensity",\n        cell_params: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("h2",{id:"83-fdtd"},"8.3 FDTD"),(0,r.kt)("p",null,"To extract the relevant data of FDTD module. "),(0,r.kt)("h3",{id:"831-fdtdpower-monitor"},"8.3.1 FDTD:power monitor"),(0,r.kt)("p",null,"Get the result of power monitor data of FDTD."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["fdtd:power_monitor"],\n        target: Literal["intensity", "line"],\n        attribute: Union[PowerAttributes, Literal["T"]],\n        monitor_name: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n        wavelength: Optional[Any] = None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfdtd_res.extract( data="fdtd:power_monitor", savepath="path_name",\n                target="intensity", attribute="E", real=True, imag=False, monitor_name="monitor_name", plot_x="x", plot_y="y", show=False, export_csv=True)\n\nfdtd_res.extract( data="fdtd:power_monitor", savepath="path_name",\n                target="line", attribute="T", real=True, imag=False, monitor_name="monitor_name", plot_x="wavelength", show=False, export_csv=True)\n            \n')),(0,r.kt)("h3",{id:"832-fdtdtime-monitor"},"8.3.2 FDTD:time monitor"),(0,r.kt)("p",null,"Get the result of FDTD time monitor data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["fdtd:time_monitor"],\n        target: Literal["intensity", "line"],\n        attribute: Union[PowerAttributes, Literal["T"]],\n        monitor_name: str,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n        wavelength: Optional[Any] = None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfdtd_res.extract(data=\'fdtd:time_monitor\', savepath=f\'{plot_path}08_TransVstime\',\n                         monitor_name=\'time_monitor_name\', target=\'line\', attribute=\'E\',plot_x=\'time\', real=True, imag=False, export_csv=True, show=False)\n\nfdtd_res.extract( data="fdtd:time_monitor", savepath=f"{plot_path}08_linear",\n                target="line", attribute="E", real=True, imag=False, monitor_name="time_monitor_1D", time=f"{0}", plot_x="y", show=False, export_csv=True)\n\nfdtd_res.extract( data="fdtd:time_monitor", savepath=f"{plot_path}08_2D",\n                target="intensity", attribute="E", real=True, imag=False, monitor_name="time_monitor_2D", time=f"{0}", plot_x="y",plot_y="z", show=False, export_csv=True)\n\nfdtd_res.extract( data="fdtd:time_monitor", savepath=f"{plot_path}08_time_3D",\n                target="intensity", attribute="E", real=True, imag=False, monitor_name="time_monitor_3D", time=f"{0}", x=f"{0}", plot_x="y",plot_y="z", show=False, export_csv=True)\n\n')),(0,r.kt)("h3",{id:"833-fdtdmode-expansion"},"8.3.3 FDTD:mode expansion"),(0,r.kt)("p",null,"Get the result of FDTD mode expansion data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["fdtd:mode_expansion"],\n        target: Literal["intensity", "line"],\n        attribute: ModeAttributes,\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None, plot_y: OptStr=None,\n        mode: Optional[Any] = None,\n        wavelength: Optional[Any] = None,\n        monitor_name: str,\n        mode_expansion_name: str,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nme_res.extract( data="fdtd:mode_expansion", savepath=f"{plot_path}04_TransVsOrder",\n                target="line", attribute="T_forward", real=True, imag=True, monitor_name="through", mode_expansion_name="me_through", wavelength=f"{wavelength}", plot_x="mode", show=False, export_csv=True, )\nme_res.extract( data="fdtd:mode_expansion", savepath=f"{plot_path}05_TransVsLambda_mode=1",\n                target="line", attribute="T_forward", real=True, imag=True, mode_expansion_name="me_through", mode=0, plot_x="wavelength", show=False, export_csv=True, )\nme_res.extract( data="fdtd:mode_expansion", savepath=f"{plot_path}05_mode_expansion",\n                target="intensity", attribute="T_forward", real=True, imag=False, monitor_name="through", mode_expansion_name="me_through", plot_x="mode", plot_y="wavelength", show=False, **export_options, )\n            \n\n')),(0,r.kt)("h3",{id:"836-fdtdmode-expansion-information"},"8.3.6 FDTD:mode expansion information"),(0,r.kt)("p",null,"Get the result of FDTD mode expansion information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["fdtd:mode_expansion_mode_info"],\n        target: Literal["intensity", "line"],\n        attribute: Literal["E", "H", "Loss", "Neff", "TE Polarization Fraction"],\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        monitor_name: str,\n        mode_expansion_name: str,\n        plot_x: OptStr=None, plot_y: OptStr=None,\n        mode: Any = None,\n        wavelength: Any = None,\n        )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'me_res.extract( data="fdtd:mode_expansion_mode_info", savepath=f"{plot_path}05_TransVsLambda_modeinfo",\n                target="line", attribute="Neff", real=True, imag=False, monitor_name="through", mode_expansion_name="me_through", plot_x="wavelength", show=False, **export_options, )\nme_res.extract( data="fdtd:mode_expansion_mode_info", savepath=f"{plot_path}03_me_throughmode_info",\n                monitor_name="through", mode_expansion_name="me_through", target="intensity", attribute="E", mode=0, wavelength=f"{wavelength}", real=True, imag=True, **export_options, show=False, )\n           \n')),(0,r.kt)("h3",{id:"834-fdtdport-mode-information"},"8.3.4 FDTD:port mode information"),(0,r.kt)("p",null,"Get the result of FDTD port mode information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["fdtd:port_mode_info"],\n        target: Literal["intensity", "line"],\n        attribute: Literal["E", "H", "Loss", "Neff", "TE Polarization Fraction"],\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        port_name: str,\n        mode: Any = None,\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'""" 02_top_profile """\nfdtd_res.extract(data="fdtd:power_monitor", savepath=f"{plot_path}{kL[2]}_profile", monitor_name="z_normal", \n                    target="intensity", attribute="E", wavelength=f"{wavelength}",  export_csv=True)\n\n""" 03port1_modeprofile """\nfdtd_res.extract(data="fdtd:port_mode_info", savepath=f"{plot_path}{kL[3]}_port_1_profile",\n                    target="intensity", attribute="E", port_name="port_1", mode=0, export_csv=True)\n                       \n')),(0,r.kt)("h3",{id:"835-fdtdmode-source-information"},"8.3.5 FDTD:mode source information"),(0,r.kt)("p",null,"Get the result of FDTD mode source information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["fdtd:mode_source_mode_info"],\n        target: Literal["intensity", "line"],\n        attribute: Literal["E", "H", "Loss", "Neff", "TE Polarization Fraction"],\n        \n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        source_name: str,\n        mode: Any = None,\n        plot_x: OptStr=None, plot_y: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'fdtd_res.extract( data="fdtd:mode_source_mode_info", savepath=f"{plot_path}02_source_modeprofile",\n                target="intensity", attribute="E", real=True, imag=True, source_name="source", show=False, **export_options, )\n\nfdtd_res.extract( data="fdtd:mode_source_mode_info", savepath=f"{plot_path}02_source_modeinfo",\n                target="line", attribute="Neff", real=True, imag=True, source_name="source", plot_x="wavelength", show=False, **export_options, )\n\n            \n\n')),(0,r.kt)("h2",{id:"84-sweep"},"8.4 Sweep"),(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"To extract the relevant data of sweep function. "),(0,r.kt)("h3",{id:"841-parameter-sweep"},"8.4.1 parameter sweep"),(0,r.kt)("p",null,"Get the result of sweep data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["sweep"],\n        target: Literal["intensity", "line"],\n        attribute: str,\n        monitor_name: Optional[str] = None,\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None,\n        **kwargs,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'swp_res.extract(data="sweep", target="line", attribute="S", plot_x="sweep_gap",\n                        savepath=f"{plot_path}/01 S", export_csv=True)\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'swp_res.extract(data="mode_expansion", target="line", attribute="T_forward", plot_x="sweep_gap", monitor_name="through",\n                savepath=f"{plot_path}/03 {resultL[2]}", export_csv=True, )\n')),(0,r.kt)("h3",{id:"842-smatrix-sweep"},"8.4.2 smatrix sweep"),(0,r.kt)("p",null,"Get the result of smatrix sweep data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'extract(\n        self,\n        *,\n        data: Literal["smatrix_sweep"],\n        target: Literal["intensity", "line"],\n        export_csv=False, export_mat=False, export_zbf=False, show=False, real=True, imag=True, savepath:Any = "a",\n        plot_x: OptStr=None,\n    )\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'smatrix_res.extract(data="smatrix_sweep", savepath=f"{plot_path}{kL[8]}_smatrix_sweep",\n                            target="line", plot_x="wavelength", real=True, imag=True, export_csv=True, export_mat=True, show=False)\n')),(0,r.kt)("p",null,"The simulation results are extracted by the ",(0,r.kt)("inlineCode",{parentName:"p"},"extract")," function in SDK."),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"85-ddm"},"8.5 DDM"),(0,r.kt)("h3",{id:"851-extract-generation-rate"},"8.5.1 Extract generation rate"),(0,r.kt)("p",null,"Generation Rate is extracted from result_afdtd (result of FDTD simulation). "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result_generate = result_afdtd.run_generation_rate_analysis(name, monitor, average_dimension, light_power, coordinate_unit, field_length_unit)\nresult_generate.extract(data, export_csv, show, log, savepath)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    add_fdtd_settings(pj, run_options)\n\n    mn = pj.Monitor()\n\n    # region --- 4. Run ---\n    if run_options.run:\n        result_fdtd = simu[simu_name].run(\n            # resources={"compute_resources": "gpu", "gpu_devices": [{"id": 0}]}\n        )\n\n        """ Analysis """\n        analysis = pj.Analysis()\n        analysis.add(name, type="generation_rate",\n                     property={"power_monitor", "average_dimension", "light_power", "workflow_id"})\n        gen_res = analysis["generation_rate"].run()\n    # endregion\n\n    # region --- 5. Extract ---\n        export_options = {"export_csv": True,\n                          "export_mat": True, "export_zbf": True}\n        gen_res.extract(data="fdtd:generation_rate", savepath, generation_rate_name,\n                        target="intensity", attribute="G", real=True, imag=False, **export_options, show=False)\n        gen_res.extract(data="fdtd:generation_rate", savepath, generation_rate_name,\n                        target="line", attribute="Pabs_total", plot_x="frequency", real=True, imag=False, show=False, export_csv=True)\n        gen_res.extract(data="fdtd:generation_rate", savepath=, generation_rate_name,\n                        target="line", attribute="Jsc", plot_x="frequency", real=True, imag=False, show=False, export_csv=True)\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"analysis.add()")," parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),"--Custom name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"monitor"),"--Name of the ",(0,r.kt)("inlineCode",{parentName:"li"},"power_monitor")," for calculating optical generation rate. The ",(0,r.kt)("inlineCode",{parentName:"li"},"power_monitor")," is required to be of 3D type"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"average_dimension"),"--Set the direction to take the average of the optical generate rate"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"light_power"),"--Set the power of the light source, measured in W. The optical generation rate will be scaled based on the power")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"gen_res.extract()")," parameters\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),"--Type of the result"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},'"generation_rate"'),", besides an image file and a csv file, the result files also include a text file in ",(0,r.kt)("inlineCode",{parentName:"li"},".gfile")," format. The coordinate unit in the csv and the image file is ",(0,r.kt)("inlineCode",{parentName:"li"},"um"),", and the generation rate unit in the two files is ",(0,r.kt)("inlineCode",{parentName:"li"},"/cm^3/s"),". These units can't be modified when extracting the result. However, the units in the gfile are controlled by ",(0,r.kt)("inlineCode",{parentName:"li"},"coordinate_unit"),"\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"field_length_unit"),". And only the gfile can be imported to the DDM solver"),(0,r.kt)("li",{parentName:"ul"},"When data is set to ",(0,r.kt)("inlineCode",{parentName:"li"},'"pabs_total"'),", the total absorption power is extracted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"export_csv"),"--Whether to export csv file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"show"),"--Whether to show the plot in a popup window")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"log"),"--Whether to apply a logarithmic normalization in the intensity plot")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"savepath"),"--The save path of the result extraction"))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"example-of-extracting-generation-rate"},"Example of extracting generation rate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    # region --- 1. Simulation Settings ---\n    add_fdtd_settings(pj, run_options)\n\n    mn = pj.Monitor()\n\n    # endregion\n\n    # region --- 2. Run ---\n    if run_options.run:\n        result_fdtd = simu[simu_name].run(\n            # resources={"compute_resources": "gpu", "gpu_devices": [{"id": 0}]}\n        )\n\n        """ Analysis """\n        analysis = pj.Analysis()\n        analysis.add(name="generation_rate", type="generation_rate",\n                     property={"power_monitor": "power_monitor", "average_dimension": "x", "light_power": 1, "workflow_id": result_fdtd.workflow_id})\n        gen_res = analysis["generation_rate"].run()\n    # endregion\n\n\n    # region --- 3. Extract ---\n        export_options = {"export_csv": True,\n                          "export_mat": True, "export_zbf": True}\n        gen_res.extract(data="fdtd:generation_rate", savepath=f"{plot_path}genrate", generation_rate_name="generation_rate",\n                        target="intensity", attribute="G", real=True, imag=False, **export_options, show=False)\n        gen_res.extract(data="fdtd:generation_rate", savepath=f"{plot_path}pabs_total", generation_rate_name="generation_rate",\n                        target="line", attribute="Pabs_total", plot_x="frequency", real=True, imag=False, show=False, export_csv=True)\n        gen_res.extract(data="fdtd:generation_rate", savepath=f"{plot_path}jsc", generation_rate_name="generation_rate",\n                        target="line", attribute="Jsc", plot_x="frequency", real=True, imag=False, show=False, export_csv=True)\n    # endregion\n')),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"852-extract-electrode-result"},"8.5.2 Extract electrode result"),(0,r.kt)("p",null,"The results of electrode are extracted from result_DDM (result of DDM simulation). The format is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    if run_options.extract:\n        export_options = {"export_csv": True,\n                          "export_mat": True, "export_zbf": True}\n        result_DDM.extract(data, electrode, operation, export_csv, show, savepath)\n')),(0,r.kt)("p",null,"Extraction of electrode result parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),"--Type of result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When it's steady state simulation or SSAC simulation, options ",(0,r.kt)("inlineCode",{parentName:"li"},'"I"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"In"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"Ip"')," are available, which means the current at the electrode versus voltage is extracted, with",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"I"')," for the total current"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"In"')," for the electron current"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"Ip"')," for the hole current"))),(0,r.kt)("li",{parentName:"ul"},"When it's SSAC simulation, options ",(0,r.kt)("inlineCode",{parentName:"li"},'"Iac"')," and ",(0,r.kt)("inlineCode",{parentName:"li"},'"C"')," are available, which means the AC current or capacitance at the electrode versus voltage at different frequency points is extracted, with",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"Iac"')," for the total AC current"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"C"')," for the capacitance"))),(0,r.kt)("li",{parentName:"ul"},"When it's transient simulation, options ",(0,r.kt)("inlineCode",{parentName:"li"},'"I"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"In"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"Ip"')," are available, which means the current at the electrode versus time is extracted, with",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"I"')," for the total current"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"In"')," for the electron current"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"Ip"')," for the hole current"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"electrode"),"--Name of the electrode"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"operation"),"--Options are ",(0,r.kt)("inlineCode",{parentName:"li"},'"real"')," (by default), ",(0,r.kt)("inlineCode",{parentName:"li"},'"imag"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"abs"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"abs2"'),". For a result whose value is a real number, this parameter can be omitted. Bur for a result whose value is a complex number, like ",(0,r.kt)("inlineCode",{parentName:"li"},'"Iac"'),", it must be used to extract the real and imaginary part of the result respectively"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export_csv"),"--Whether to export csv file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"show"),"--Whether to show the plot in a popup window"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"savepath"),"--The save path of the result extraction")),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"example-of-extracting-electrode-result"},"Example of extracting electrode result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    if run_options.extract:\n        export_options = {"export_csv": True,\n                          "export_mat": True, "export_zbf": True}\n\n        result_ddm.extract(data="ddm:electrode_ac", electrode_name=vsource, savepath=f"{plot_path}C",\n                           target="line", attribute="C", plot_x=f"v_{vsource.lower()}", real=True, imag=False, frequency=1e8, show=False, export_csv=True)\n    # endregion\n')),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"853-extract-results-of-electrical-monitor"},"8.5.3 Extract results of electrical monitor"),(0,r.kt)("p",null,"The electrical monitor result extraction is similar to the electrode result extraction, but a monitor instead of an electrode is required to be specified. The format is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result_DDM.extract(data, monitor, operation, export_csv, show, log, savepath)\n")),(0,r.kt)("p",null,"Extraction of electrode result parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),"--Type of result"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When the monitor is ",(0,r.kt)("inlineCode",{parentName:"li"},"charge_monitor"),", options ",(0,r.kt)("inlineCode",{parentName:"li"},'"n"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"p"')," are available, which means the concentration of carriers is extracted, with",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"n"')," for the electron"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"p"')," for the hole"))),(0,r.kt)("li",{parentName:"ul"},"When the monitor is ",(0,r.kt)("inlineCode",{parentName:"li"},"electric_monitor"),", options ",(0,r.kt)("inlineCode",{parentName:"li"},'"electric_field"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"ex"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"ey"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"ez"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"potential"')," are available, which means the concentration of carriers is extracted, with",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"electric_field"')," for the absolute value of the electric field"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"ex"')," for the x component of the electric field"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"ey"')," for the y component of the electric field"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"ez"')," for the z component of the electric field"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"potential"')," for the electrostatic potential"))),(0,r.kt)("li",{parentName:"ul"},"When the monitor is ",(0,r.kt)("inlineCode",{parentName:"li"},"band_monitor"),", options ",(0,r.kt)("inlineCode",{parentName:"li"},'"conduction_band"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"valence_band"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"equasi_fermi"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"hquasi_fermi"')," are available, which means the band structure is extracted, with",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"conduction_band"')," for the conduction band energy level"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"valence_band"')," for the valence band energy level"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"equasi_fermi"')," for the electron quasi-Fermi potential"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"hquasi_fermi"')," for the hole quasi-Fermi potential"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"operation"),"--Options are ",(0,r.kt)("inlineCode",{parentName:"p"},'"real"')," (by default), ",(0,r.kt)("inlineCode",{parentName:"p"},'"imag"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"abs"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"abs2"'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"export_csv"),"--Whether to export csv file. When the monitor is of 2D type, the result is a distribution in a 2D region, and the plot is an intensity image; When the monitor is of 1D type, the result is a distribution along a 1D range, and the plot is a curve")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"show"),"--Whether to show the plot in a popup window")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"log"),"--Whether to take the logarithm of the result")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"savepath"),"--The save path of the result extraction"))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"example-of-extracting-electrical-monitor-result"},"Example of extracting electrical monitor result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'for voltage in voltage_list:\n            slice_options = {f"v_{vsource.lower()}": voltage, f"v_{gnd.lower()}": 0.0}\n\n            # --- Charge Monitor ---\n            attribute = "n"  # "n", "p"\n            result_ddm.extract(data="ddm:charge_monitor", monitor_name="charge_monitor", savepath=f"{plot_path}{attribute}/{voltage}V",\n                               target="intensity", attribute=attribute, real=True, imag=False, log=False, show=False, **slice_options, **export_options)\n            \n            # --- Electrical Monitor ---\n            attribute = "E"  # "E", "Ex", "Ey", "Ez"\n            result_ddm.extract(data="ddm:electrical_monitor", monitor_name="elec_monitor", savepath=f"{plot_path}{attribute}/{voltage}V",\n                               target="intensity", attribute=attribute, real=True, imag=False, log=False, show=False, **slice_options, **export_options)\n\n            # --- Band Monitor ---\n            attribute = "Ec" # "Ec", "Ev", "Efn", "Efp"                   \n            result_ddm.extract(data="ddm:band_monitor", monitor_name="band_monitor", savepath=f"{plot_path}{attribute}/{voltage}V",\n                               target="line", attribute=attribute, plot_x="y", real=True, imag=False, log=False, show=False, **slice_options, export_csv=True)\n')),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"854-extract-results-of-modulator-analysis"},"8.5.4 Extract results of modulator analysis"),(0,r.kt)("p",null,"The results of modulator analysis are extracted from result_afde (result of AFDE). The format is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result_fde.extract(data, savepath, export_csv)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"result_fde.extract()")," parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),"--Type of result. Options are ",(0,r.kt)("inlineCode",{parentName:"li"},'"mesh_structurex"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"calculate_modes"'),", which means the effective index or loss versus voltage is extracted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export_csv"),"--Whether to export csv file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"show"),"--Whether to show the plot in a popup window"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"savepath"),"--The save path of the result extraction")),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"example-of-extracting-modulator-analysis-result"},"Example of extracting modulator analysis result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'    result_fde = analysis["fde_analysis"].run()\n    # endregion\n\n    # region --- 5. Extract ---\n    \n    export_options = {"export_csv": True,\n                      "export_mat": True, "export_zbf": True}\n\n    if run_options.extract:\n        if run_options.index_preview:\n            result_fde.extract(\n                data="mesh_structure", savepath=f"{plot_path}01_index", export_csv=True)\n            \n        if run_options.run:\n            res = result_fde.extract(\n                data="calculate_modes", savepath=f"{plot_path}02_neff_table", export_csv=True)\n            return res\n'))))))}d.isMDXComponent=!0}}]);