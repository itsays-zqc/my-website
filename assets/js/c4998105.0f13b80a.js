"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5807],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>_});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=s(a),g=r,_=d["".concat(p,".").concat(g)]||d[g]||f[g]||l;return a?n.createElement(_,o(o({ref:t},m),{},{components:a})):n.createElement(_,o({ref:t},m))}));function _(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=g;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},9691:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={},o="Analysis",i={unversionedId:"test/SDK/8Analysis",id:"test/SDK/8Analysis",title:"Analysis",description:"Analysis is an extension function for three basic solvers. In this section, we will introduce the coding method of analysis corresponding to FDE, FDTD and EME.",source:"@site/docs/test/SDK/8Analysis.md",sourceDirName:"test/SDK",slug:"/test/SDK/8Analysis",permalink:"/my-website/docs/test/SDK/8Analysis",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/test/SDK/8Analysis.md",tags:[],version:"current",frontMatter:{},sidebar:"testSidebar",previous:{title:"Preview",permalink:"/my-website/docs/test/SDK/7Preview"},next:{title:"Extract result",permalink:"/my-website/docs/test/SDK/9Extract"}},p={},s=[{value:"7.1 FDE Analysis",id:"71-fde-analysis",level:2},{value:"7.1.1 Workflow id",id:"711-workflow-id",level:3},{value:"7.1.2 Modal Analysis",id:"712-modal-analysis",level:3},{value:"7.1.3 Frequency Analysis",id:"713-frequency-analysis",level:3},{value:"7.2 EMEAnalysis",id:"72-emeanalysis",level:2},{value:"7.2.1 Workflow id",id:"721-workflow-id",level:3},{value:"7.2.2 Eme propagate",id:"722-eme-propagate",level:3},{value:"7.2.3 Periodicity",id:"723-periodicity",level:3},{value:"7.2.4 Group span sweep",id:"724-group-span-sweep",level:3},{value:"7.2.5 Wavelength sweep",id:"725-wavelength-sweep",level:3},{value:"7.2.6 Select source",id:"726-select-source",level:3},{value:"7.3  ModeExpansion",id:"73--modeexpansion",level:2},{value:"7.3.1 Workflow id",id:"731-workflow-id",level:3},{value:"7.3.2 Mode expansion",id:"732-mode-expansion",level:3},{value:"7.4 Farfield",id:"74-farfield",level:2},{value:"Frequency_settings",id:"frequency_settings",level:3},{value:"7.4 Overlap",id:"74-overlap",level:2}],m={toc:s},d="wrapper";function f(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"analysis"},"Analysis"),(0,r.kt)("font",{face:"Calibri"},(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"Analysis is an extension function for three basic solvers. In this section, we will introduce the coding method of analysis corresponding to FDE, FDTD and EME.\n:param name: Name of the analysis\n:param typename: Type of the analysis. Selections are ","['FDEAnalysis', 'EMEAnalysis', 'Overlap', 'far_field', 'mode_expansion']","\n:param props: Properties of the analysis\n:return: None"),(0,r.kt)("h2",{id:"71-fde-analysis"},"7.1 FDE Analysis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'add_analysis(\n        name: str,\n        type: Literal["fde_analysis"],\n        property: dict,\n    )\n')),(0,r.kt)("h3",{id:"711-workflow-id"},"7.1.1 Workflow id"),(0,r.kt)("p",null,"| workflow_id                                        | string  |                   | The name of the result folder generated by the FDE solver                    |"),(0,r.kt)("h3",{id:"712-modal-analysis"},"7.1.2 Modal Analysis"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"calculate_modes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"mesh_structure"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.55"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength_offset"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"number_of_trial_modes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"search"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"max_index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Selections are ","['max_index', 'near_n']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"calculate_group_index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"bent_waveguide.bent_waveguide"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"bent_waveguide.radius"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"bent_waveguide.orientation"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"bent_waveguide.location"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"simulation_center"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Selections are ","['simulation_center']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"n"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")))),(0,r.kt)("h3",{id:"713-frequency-analysis"},"7.1.3 Frequency Analysis"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"frequency analysis"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"start wavelength"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.55"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"stop wavelength"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.499"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"number of points"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"effective index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"detailed dispersion calculation"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'simu_name = "FDE"\nanalysis_name = "FDE_Analysis"\nanalysis = pj.Analysis()\nanalysis.add_analysis(name=analysis_name, type="FDEAnalysis",\n                        props={"workflow_id": simu_res.workflow_id, "simulation_name": simu_name,\n                                "modal_analysis": {"calculate_modes": run_options.run, "mesh_structure": True,\n                                                "wavelength": wavelength, "wavelength_offset": 0.0001, "number_of_trial_modes": 20,\n                                                "search": "max_index", \n                                                "calculate_group_index": False,\n                                                "bent_waveguide": {"bent_waveguide": False, "radius": 1, "orientation": 0, "location": "simulation_center", }\n                                                },\n                                "frequency_analysis": {"frequency_analysis": False,\n                                                    "start_wavelength": 1.50, "stop_wavelength": 1.60, "number_of_points": 3,\n                                                    "effective_index": 1, "detailed_dispersion_calculation": False,\n                                                    }})\nresult_fde = analysis["DC_FDE_Analysis"].run()                                                   \n')),(0,r.kt)("h2",{id:"72-emeanalysis"},"7.2 EMEAnalysis"),(0,r.kt)("h3",{id:"721-workflow-id"},"7.2.1 Workflow id"),(0,r.kt)("p",null,"| workflow_id                                              | string  |              | The name of the result folder generated by the EME solver                    |"),(0,r.kt)("h3",{id:"722-eme-propagate"},"7.2.2 Eme propagate"),(0,r.kt)("p",null,"| eme_propagate                                            | boolean | False        |                                                                              |\n| override_group_spans                                     | boolean | False        |                                                                              |\n| cell_group_settings.","[span]","                               | number  |              |                                                                              |\n| cell_group_settings.","[sc]","                                 | string  |              | Selections are ","['none', 'sub_cell']","                                          |"),(0,r.kt)("h3",{id:"723-periodicity"},"7.2.3 Periodicity"),(0,r.kt)("p",null,"|  periodicity                                  | boolean | False        |                                                                              |\n|  periodic_group_definition.","[start_cell_group]"," | string  |              | 'group_span_1' represents the first group, and so on                         |\n|  periodic_group_definition.","[end_cell_group]","   | string  |              | 'group_span_1' represents the first group, and so on                         |\n|  periodic_group_definition.","[periods]","          | integer |              |                                                                              |"),(0,r.kt)("h3",{id:"724-group-span-sweep"},"7.2.4 Group span sweep"),(0,r.kt)("p",null,"|  group_span_sweep                        | boolean | False        |                                                                              |\n|  parameter                               | string  | group_span_1 | 'group_span_1' represents the first group, and so on                         |\n|  start                                   | number  | 0            | A float, or a parameter, or a parameter expression that evaluates to a float |\n|  stop                                    | number  | 1            | A float, or a parameter, or a parameter expression that evaluates to a float |\n|  number_of_points                        | integer | 3            |                                                                              |"),(0,r.kt)("h3",{id:"725-wavelength-sweep"},"7.2.5 Wavelength sweep"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength_sweep.wavelength_sweep"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength_sweep.start"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength_sweep.stop"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength_sweep.number_of_wavelength_points"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h3",{id:"726-select-source"},"7.2.6 Select source"),(0,r.kt)("p",null,"| select_source.phase                                      | number  | 0            | A float, or a parameter, or a parameter expression that evaluates to a float |\n| select_source.source_port                                | object  |              | Select an EME port object                                                    |\n| select_source.select_mode                                | string  | TE           | Selections are ","['TE', 'TM']","                                                  |\n| override_wavelength.wavelength                           | number  |              | This parameter takes effect when 'use_wavelength_sweep' of EME solver is true|\n| energy_conservation                                      | string  | make_passive | Selections are ","['make_passive', 'conserve_energy', 'none']","                   |"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'analysis = pj.Analysis()\nanalysis.add(name="eme_propagate", type="eme_analysis",\n                property={"workflow_id": eme_base_res.workflow_id, "eme_propagate": True,\n                        "periodicity": {"periodicity": True,\n                                        "periodic_group_definition": [{"start_cell_group": "group_span_1",\n                                                                        "end_cell_group": "group_span_1",\n                                                                        "periods": grating_periods}]},\n                        "group_span_sweep": {"group_span_sweep": False,\n                                        "parameter": "group_span_1", "start": 41, "stop": 61, "number_of_points": 11},\n                        "wavelength_sweep": {"wavelength_sweep": False,\n                                        "start": 1.5, "stop":1.6, "number_of_wavelength_points": 11},\n                        "select_source": {"phase": 0, "select_mode": "TE"}})\neme_res = analysis["eme_propagate"].run()\n')),(0,r.kt)("h2",{id:"73--modeexpansion"},"7.3  ModeExpansion"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,r.kt)("h3",{id:"731-workflow-id"},"7.3.1 Workflow id"),(0,r.kt)("p",null,"| workflow_id                                                                             | string  |-                   | The name of the result folder generated by the FDTD solver                       |"),(0,r.kt)("h3",{id:"732-mode-expansion"},"7.3.2 Mode expansion"),(0,r.kt)("p",null,"| mode_expansion.monitors_for_expansion.","[frequency_monitor]","                               | string  |-                   | The name of the power monitor needs to analyze mode expansion                    |\n| mode_expansion.direction                                                                | string  | positive          | Selections are ","['positive', 'negative']","                                          |"),(0,r.kt)("p",null,"| mode_expansion.mode_calculation.mode_selection                                          | string  | -                  | Selections are ","['fundamental', 'fundamental_TE', 'fundamental_TM', 'user_select']","|\n| mode_expansion.mode_calculation.mode_index                                              | array   | -                  | 1d list, the index of the mode to be expanded, for example, ","[0, 1, 2]","            |\n| mode_expansion.mode_calculation.search                                                  | string  | max_index         | Selections are ","['max_index', 'near_n']","                                           |\n| mode_expansion.mode_calculation.n                                                       | number  | 1.0               | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.number_of_trial_modes                                   | integer | 20                |                                                                                  |\n| mode_expansion.mode_calculation.override_global_options                                 | boolean | False             |                                                                                  |\n| mode_expansion.mode_calculation.override_global_monitor_setting.sample_spacing          | integer | 0                 |                                                                                  |\n| mode_expansion.mode_calculation.override_global_monitor_setting.use_wavelength_spacing  | boolean | True              |                                                                                  |\n| mode_expansion.mode_calculation.override_global_monitor_setting.use_source_limits       | boolean | False             |                                                                                  |\n| mode_expansion.mode_calculation.override_global_monitor_setting.spacing_type            | string  | wavelength        | Selections are ","['wavelength', 'frequency']","                                       |\n| mode_expansion.mode_calculation.override_global_monitor_setting.spacing_limit           | string  | min_max           | Selections are ","['min_max', 'center_span']","                                        |\n| mode_expansion.mode_calculation.override_global_monitor_setting.wavelength_min          | number  |-                   | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.wavelength_max          | number  | -                  | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.wavelength_center       | number  | -                  | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.wavelength_span         | number  |-                   | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.frequency_min           | number  | -                  | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.frequency_max           | number  |-                   | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.frequency_center        | number  | -                  | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.frequency_span          | number  | -                  | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.override_global_monitor_setting.frequency_points        | integer | 5                 |                                                                                  |\n| mode_expansion.mode_calculation.bent_waveguide.use_bent_waveguide                       | boolean | False             |                                                                                  |\n| mode_expansion.mode_calculation.bent_waveguide.radius                                   | number  | 1.0               | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.bent_waveguide.orientation                              | number  | 0.0               | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| mode_expansion.mode_calculation.bent_waveguide.location                                 | string  | simulation_center | Selections are ","['simulation_center']","                                             |\n| mode_expansion.override_default_boundary_conditions                                     | boolean | False             |                                                                                  |\n| boundary_conditions.x_min_bc                                                            | string  | PEC               | Selections are ","['PEC', 'PMC', 'PML', 'periodic']","                                 |\n| boundary_conditions.x_max_bc                                                            | string  | PEC               | Selections are ","['PEC', 'PMC', 'PML', 'periodic']","                                 |\n| boundary_conditions.y_min_bc                                                            | string  | PEC               | Selections are ","['PEC', 'PMC', 'PML', 'periodic']","                                 |\n| boundary_conditions.y_max_bc                                                            | string  | PEC               | Selections are ","['PEC', 'PMC', 'PML', 'periodic']","                                 |\n| boundary_conditions.z_min_bc                                                            | string  | PEC               | Selections are ","['PEC', 'PMC', 'PML', 'periodic']","                                 |\n| boundary_conditions.z_max_bc                                                            | string  | PEC               | Selections are ","['PEC', 'PMC', 'PML', 'periodic']","                                 |\n| rotate_settings.theta                                                                   | number  | 0                 | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| rotate_settings.phi                                                                     | number  | 0                 | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| rotate_settings.rotation_offset                                                         | number  | 0                 | A float, or a parameter, or a parameter expression that evaluates to a float     |\n| modal_analysis.mode_removal.threshold                                                   | number  | 0.01              | A float, or a parameter, or a parameter expression that evaluates to a float     |"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'fdtd_res = simu[simu_name].run(\n            # resources={"compute_resources": "gpu", "gpu_devices": [{"id": 0}]}\n        )\n\nanalysis = pj.Analysis()\nanalysis.add(name="me_through", type="ModeExpansion",\n                property={"workflow_id": fdtd_res.workflow_id,\n                        "mode_expansion": {"direction": "positive",\n                                           "monitors_for_expansion": [{"frequency_monitor": "through"}],\n                                           "mode_calculation": {"mode_selection": "user_select", "mode_index": [0, 1, 2, 3],\n                                                                "override_global_monitor_setting": {"wavelength_center": wavelength, "wavelength_span": 0.1, "frequency_points": 11}}}})\nme_res = analysis["me_through"].run()\n')),(0,r.kt)("h2",{id:"74-farfield"},"7.4 Farfield"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"huygens_source"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Selections are ","['from_dataspace', 'from_monitor']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"workflow_id"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of the result folder generated by the FDE solver")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_data.fde_analysis_name"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of the FDE analysis needs to analyze far field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_data.mode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_data.data"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Select a dataspace object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"power_monitor_name"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of the power monitor needs to analyze far field")))),(0,r.kt)("h3",{id:"frequency_settings"},"Frequency_settings"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"auto"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wavelength"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"frequency"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"projection_method"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Selections are ","['planar', 'angular']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"material index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"farfield filter"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"projection distance"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"points in x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"points_in_y"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"farfield x span"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"farfield y span"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"farfield x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"farfield y"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A float, or a parameter, or a parameter expression that evaluates to a float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"projection direction"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Selections are ","['forward', 'backward']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"horizontal points"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"vertical points"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"if run_options.run_far_field:\n    fde_res =  = analysis[\"FDEAnalysis\"].run()\n        far_field_base_workflow_id = fde_res.workflow_id\n\n    if run_options.run_far_field:\n        analysis.add(name=\"Far_Field\", type=\"FarField\",\n                     property={\n                         'huygens_source': 'from_dataspace',  # selections are ['from_dataspace','from_monitor']\n                         'workflow_id': far_field_base_workflow_id,\n                         'field_data': {\"fde_analysis_name\": \"FDEAnalysis\",\n                                        'mode': 0,\n                                         },\n                         'far_field_settings': {'projection_method': 'planar',  # selections are ['planar','angular']\n                                                'material_index': 3.7,\n                                                'farfield_filter': 0,\n                                                'projection_distance': 8000,\n                                                'points_in_x': 50,\n                                                'points_in_y': 50,\n                                                'farfield_x_span': 40,\n                                                'farfield_y_span': 40,\n                                                'farfield_x': 0,\n                                                'farfield_y': 0,}}\n                     )\n        far_field_res = analysis[\"Far_Field Simulation\"].run()\n\n")),(0,r.kt)("h2",{id:"74-overlap"},"7.4 Overlap"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_1.workflow_id"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of the result folder generated by the FDE solver")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_1.mode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_1.data"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Select a dataspace object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_2.workflow_id"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of the result folder generated by the FDE solver")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_2.mode"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"field_2.data"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Select a dataspace object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"optimize_position"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"True"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"x_shift"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"y_shift"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"z_shift"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"recenter"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"custom"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Selections are ","['to_center_of_field_data_1', 'to_0_0', 'custom']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"shift_center"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'beam_res = simu[simu_name].run_fde_beam_and_extract(\n                property={"define_gaussian_beam_by": "waist_size_and_position",  # [waist_size_and_position,beam_size_and_divergence],\n                          "waist_radius": 5.2, "distance_from_waist": 1.5, "refractive_index": 1.45, "theta": 0, "phi": 0,\n                          "polarization_angle": 90, "sample_span": 6, "sample_resolution": 200},\n                savepath=plot_path + "beam_heatmap")\nanalysis.add(name="overlap", type="overlap",\n        property={"field_1": {"workflow_id": beam_res.workflow_id, "mode": 0},\n                "field_2": {"workflow_id": fde_res.workflow_id, "mode": 0},\n                "optimize_position": True})\noverlap_res = analysis["overlap"].run()\n')))))}f.isMDXComponent=!0}}]);