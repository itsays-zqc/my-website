"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9849],{6459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=n(7462),a=(n(7294),n(3905)),r=n(7617);const o={},s="Directional Coupler",l={unversionedId:"examples/PIC/DirectionalCoupler/DirectionalCoupler",id:"examples/PIC/DirectionalCoupler/DirectionalCoupler",title:"Directional Coupler",description:"Introduction:",source:"@site/docs/examples/PIC/DirectionalCoupler/DirectionalCoupler.md",sourceDirName:"examples/PIC/DirectionalCoupler",slug:"/examples/PIC/DirectionalCoupler/",permalink:"/my-website/docs/examples/PIC/DirectionalCoupler/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/PIC/DirectionalCoupler/DirectionalCoupler.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesSidebar",previous:{title:"PIC",permalink:"/my-website/docs/category/pic"},next:{title:"1X2 MMI",permalink:"/my-website/docs/examples/PIC/MMI/"}},p={},d=[{value:"Introduction:",id:"introduction",level:2},{value:"Simulation Methods:",id:"simulation-methods",level:2},{value:"Directional Coupler(FDE module)",id:"directional-couplerfde-module",level:2},{value:"1.Basic Operations:",id:"1basic-operations",level:3},{value:"1.1 Import File",id:"11-import-file",level:4},{value:"1.2 SDK initialization",id:"12-sdk-initialization",level:4},{value:"2.Code description",id:"2code-description",level:3},{value:"2.1 import modules",id:"21-import-modules",level:4},{value:"2.2  Define simulation function",id:"22--define-simulation-function",level:4},{value:"2.3 Define parameters",id:"23-define-parameters",level:4},{value:"2.4 Define Materials",id:"24-define-materials",level:4},{value:"2.5 Create model",id:"25-create-model",level:4},{value:"2.6 Boundary",id:"26-boundary",level:4},{value:"2.7  Add sub-mesh",id:"27--add-sub-mesh",level:4},{value:"2.8  FDE simulation",id:"28--fde-simulation",level:4},{value:"2.9  Structure schematic",id:"29--structure-schematic",level:4},{value:"2.10  Index Preview",id:"210--index-preview",level:4},{value:"2.11 Run Simulation",id:"211-run-simulation",level:4},{value:"2.12 Retrieve results",id:"212-retrieve-results",level:4},{value:"2.13 Switches",id:"213-switches",level:4},{value:"3.Output results",id:"3output-results",level:3},{value:"Directional Coupler(FDTD module)",id:"directional-couplerfdtd-module",level:2},{value:"1.Basic Operations",id:"1basic-operations-1",level:3},{value:"2.Code Description",id:"2code-description-1",level:3},{value:"2.1 Define Parameters",id:"21-define-parameters",level:4},{value:"2.2 Define Materials",id:"22-define-materials",level:4},{value:"2.3 Define Waveform",id:"23-define-waveform",level:4},{value:"2.4 Create modelBoundarySub-mesh",id:"24-create-modelboundarysub-mesh",level:4},{value:"2.5 Source",id:"25-source",level:4},{value:"2.6 Monitor",id:"26-monitor",level:4},{value:"2.7 FDTD simulation",id:"27-fdtd-simulation",level:4},{value:"2.8  Schematic of Structure",id:"28--schematic-of-structure",level:4},{value:"2.9  Calculate Source",id:"29--calculate-source",level:4},{value:"2.10  Run Simulation",id:"210--run-simulation",level:4},{value:"2.11  Results",id:"211--results",level:4},{value:"2.11  Switches",id:"211--switches",level:4},{value:"3.Output results",id:"3output-results-1",level:3},{value:"Supplement",id:"supplement",level:2}],m={toc:d},u="wrapper";function c(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,i.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"directional-coupler"},"Directional Coupler"),(0,a.kt)("h2",{id:"introduction"},"Introduction:"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Directional couplers (DC) are an important category of optical splitters. They are typically composed of two adjacent single-mode waveguides, and the coupling coefficient is determined by both the length of the coupler and the spacing between them. This feature allows for effective control of the splitting ratio."),(0,a.kt)("p",null,"\u2003","\u2003","When it comes to directional couplers, we pay close attention to several key parameters, including ",(0,a.kt)("strong",{parentName:"p"},"insertion loss"),", ",(0,a.kt)("strong",{parentName:"p"},"splitting ratio"),", ",(0,a.kt)("strong",{parentName:"p"},"device dimensions"),", and ",(0,a.kt)("strong",{parentName:"p"},"operating bandwidth"),". ")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC introduction",src:n(1235).Z,title:"DC introduction",width:"1419",height:"521"})),(0,a.kt)("h2",{id:"simulation-methods"},"Simulation Methods:"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"FDE module")," can be used to calculate the symmetric and anti-symmetric mode field distributions of the directional coupler\u2019s two arms. From these calculations, the effective index can be determined, allowing for the theoretical calculation of the coupling length required to achieve the target splitting ratio. "),(0,a.kt)("p",null,"\u2003","\u2003"," And the ",(0,a.kt)("inlineCode",{parentName:"p"},"FDTD module")," can be used to perform precise calculations of light propagation in the DC. The light field transmission images in the monitor allow for a visual assessment,the related data of which facilitate further optimization and validation of the coupling length and spacing parameters in the DC splitter."),(0,a.kt)("p",null,"\u2003","\u2003","After data processing, it can be obtained that the splitting ratio, insertion loss, and operating bandwidth of DC. In designing high-performance directional couplers for various optical communication and integrated photonics applications, these calculations and optimization processes are instrumental.")),(0,a.kt)("h2",{id:"directional-couplerfde-module"},"Directional Coupler(FDE module)"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","By using the ",(0,a.kt)("inlineCode",{parentName:"p"},"FDE module"),", we will calculate symmetric and antisymmetric modes in a Directional Coupler modeled with the SDK.")),(0,a.kt)("h3",{id:"1basic-operations"},"1.Basic Operations:"),(0,a.kt)("h4",{id:"11-import-file"},"1.1 Import File"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Once you have installed and configured the environment, import the ",(0,a.kt)("inlineCode",{parentName:"p"},"DC_FDE.py")," SDK code and the ",(0,a.kt)("inlineCode",{parentName:"p"},"DC.gds layout"),"."),(0,a.kt)("p",null,"\u2003","\u2003","The example library and related model code are usually located in the directory ",(0,a.kt)("inlineCode",{parentName:"p"},"AIO_SDK/.venv_maxoptics/site-packages/maxoptics_sdk/examples"),", and the GDS file is generally imported into the ",(0,a.kt)("inlineCode",{parentName:"p"},"../examples/examples_gds")," folder.")),(0,a.kt)("h4",{id:"12-sdk-initialization"},"1.2 SDK initialization"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Create a new terminal and run the code after you import the Python and GDS files. It may take some time for Max-Optics SDK to initialize on the first run.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Version of Max-Optics sdk is 2.3.0.4.630.2000\nMax-Optics SDK is initializing...\n")),(0,a.kt)("h3",{id:"2code-description"},"2.Code description"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Now let's learn the functions that correspond to the specific code.")),(0,a.kt)("h4",{id:"21-import-modules"},"2.1 import modules"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","To begin, we need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"import")," command to call the relevant functional modules.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import maxoptics_sdk.all as mo\nfrom maxoptics_sdk.helper import timed, with_path\nfrom typing import List, Literal, NamedTuple\nimport os\nimport time\n")),(0,a.kt)("h4",{id:"22--define-simulation-function"},"2.2  Define simulation function"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","We define parameters like the simulation wavelength and grid accuracy inside the simulation function. For instance, in the case given, the simulation is run with a grid accuracy of 0.02 \u03bcm, and the results for 20 suggested modes at a wavelength of 1.55 \u03bcm are calculated.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def simulation(*, run_mode='local', wavelength=1.55, grid=0.02, number_of_trial_modes=20, run_options: 'RunOptions', `kwargs):\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The provided code contains comments that define the simulation parameters. Let's explain each of these parameters. ",(0,a.kt)("br",null),"\u2003","\u2003","The function ",(0,a.kt)("inlineCode",{parentName:"p"},"simulation")," is used to define the simulation parameters for the program. ",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"run_mode")," parameter determines the type of calculation resources to be used. ",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"wavelength")," parameter specifies the wavelength of the input light in micrometers. ",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"grid")," parameter represents the grid accuracy in micrometers. ",(0,a.kt)("br",null),"\u2003","\u2003","Lastly, the ",(0,a.kt)("inlineCode",{parentName:"p"},"number_of_trial_modes")," parameter sets the number of modes to be calculated.")),(0,a.kt)("h4",{id:"23-define-parameters"},"2.3 Define parameters"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Define commonly used parameters in region 0, such as the width and height of the simulation boundary, the start time of the simulation, the path and name for the simulation output, the path to the imported GDS layout, and other parameters required for structural parameterized modeling.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 0. General Parameters ---\n  yspan_solver = 5 \n  zspan_solver = 2\n  time_str = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n  path = kwargs['path']\n  simu_name = f'FDE_DC_yspan={yspan_solver}_{time_str}'\n  gds_file_root_path = os.path.abspath(os.path.join(path, '..'))\n  gds_file = gds_file_root_path + '/examples_gds/DC.gds' \n  project_name = f'{simu_name}_{run_mode}_{time_str}'\n  plot_path = kwargs.get('plot_dir', path) + '/plots/' + project_name + '/'\n  kL = [f'0{k}' for k in range(5)]\n  export_options = {\"export_csv\": True, \"export_mat\": True, \"export_zbf\": True}\n  l_bend=5.6 # the length of z bend\n  l_beam=15 # the length of 2 beams \n  l_input=2.5 # the length of input wg \n# endregion\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The code defines several parameters and variables necessary for the simulation process. The ",(0,a.kt)("inlineCode",{parentName:"p"},"yspan_solver")," parameter represents the width of the simulation boundary, specified in micrometers. Similarly, the ",(0,a.kt)("inlineCode",{parentName:"p"},"zspan_solver")," parameter denotes the height of the simulation boundary in micrometers. The ",(0,a.kt)("inlineCode",{parentName:"p"},"time_str")," variable is used to obtain the current time as a timestamp for the simulation.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"path")," variable defines the file path for the simulation, while ",(0,a.kt)("inlineCode",{parentName:"p"},"simu_name")," specifies the name of the simulation file.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"gds_file_root_path")," variable defines the path for importing the GDS layout. ",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"project_name")," variable assigns a name to the project for the simulation output. ",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"plot_path")," variable determines the directory where the simulation result plots will be saved. ",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"export_options")," parameter allows for the definition of options for exporting the simulation results.",(0,a.kt)("br",null),"\u2003","\u2003","Lastly, the variables ",(0,a.kt)("inlineCode",{parentName:"p"},"l_bend")," ,",(0,a.kt)("inlineCode",{parentName:"p"},"l_beam"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"l_input")," represent the lengths of specific components within the simulation, such as the length of the z-bend, the length of the two beams, and the length of the input waveguide, respectively. ",(0,a.kt)("br",null),"\u2003","\u2003","These parameters and variables together facilitate the successful execution and organization of the simulation process.")),(0,a.kt)("h4",{id:"24-define-materials"},"2.4 Define Materials"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Certainly, let's proceed to the next step, where we set up the materials required for the simulation in region 2. In this case, we will directly use relevant materials from the MO library.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 2. Material ---\n  mt = pj.Material()\n  mt.add_lib(name='Si', data=mo.Material.Si_Palik, order=2)\n  mt.add_lib(name='SiO2', data=mo.Material.SiO2_Palik, order=2)\n  mt.add_lib(name='Air', data=mo.Material.Air, order=2)\n# endregion\n")),(0,a.kt)("h4",{id:"25-create-model"},"2.5 Create model"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In the next step, we will create the Directional Coupler model in region 3. We have two options for modeling the structure:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC klayout",src:n(2248).Z,title:"DC klayout",width:"1544",height:"343"}))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 3. Structure ---\n    st = pj.Structure(mesh_type="curve_mesh", mesh_factor=1.2, background_material=mt["SiO2"])\n    st.add_geometry(name="box", type="gds_file",\n                    property={"general": {"path": gds_file, "cell_name": "TOP", "layer_name": (1, 1)},\n                              "geometry": {"x": 0, "y": 0, "z": 0.11, "z_span": 6},\n                              "material": {"material": mt["SiO2"], "mesh_order": 1}})\n \n    st.add_geometry(name="dc", type="gds_file",\n                    property={"general": {"path": gds_file, "cell_name": "TOP", "layer_name": (0, 0)},\n                              "geometry": {"x": 0, "y": 0, "z": 0.11, "z_span": 0.22},\n                              "material": {"material": mt["Si"], "mesh_order": 2}})\n    st.add_geometry(name=\'slab\', type=\'Rectangle\',\n                    property={\'geometry\': {\'x_min\': -l_input-l_bend-l_beam/2-3, \'x_max\':l_input+l_bend+l_beam/2+3, \'y\': 0, \'y_span\': 8, \'z\': 0.045, \'z_span\': 0.09},\n                              \'material\': {\'material\': mt[\'Si\'], \'mesh_order\': 2}} )\n# endregion\n')),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Here, we import the DC layout from the GDS file. we can create the\xa0DC model directly within\xa0the SDK\xa0using\xa0the ",(0,a.kt)("inlineCode",{parentName:"p"},"Structure"),"\xa0function.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter defines the structure name.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," parameter specifies the structure type.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"path"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"cell_name"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"layer_name")," parameters point to the GDS file and specify the relevant layers and cell names used in the layout.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"geometry"),"\xa0parameter\xa0sets\xa0the\xa0structure's\xa0coordinates. ",(0,a.kt)("br",null),"\u2003","\u2003","The\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"material"),"\xa0parameter\xa0specifies\xa0the\xa0material\xa0properties ",(0,a.kt)("br",null),"\u2003","\u2003","The\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"mesh_order"),"\xa0parameter\xa0sets\xa0the\xa0mesh\xa0order\xa0for\xa0the\xa0simulation. ")),(0,a.kt)("h4",{id:"26-boundary"},"2.6 Boundary"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","After establishing the model, we can add the simulation region in region 4 and define the simulation boundary conditions. This involves specifying the geometry of the simulation region, the boundary conditions in the xyz directions, and detailed parameters.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 4. Boundary ---\nst.OBoundary(property={'geometry': {'x': 0, 'x_span': 0, 'y': 0, 'y_span': yspan_solver, 'z': 0, 'z_span': zspan_solver},\n                        'boundary': {'y_min': 'PML', 'y_max': 'PML', 'z_min': 'PML', 'z_max': 'PML'},\n                        'general_pml': {'pml_layer': 12, 'pml_kappa': 1, 'pml_sigma': 15, 'pml_polynomial': 3}\n                        })\n# endregion\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In this code segment, we define simulation region using the ",(0,a.kt)("inlineCode",{parentName:"p"},"OBoundary")," function.",(0,a.kt)("br",null),"\u2003","\u2003","First, we define the size of the boundary with ",(0,a.kt)("inlineCode",{parentName:"p"},"geometry")," function.",(0,a.kt)("br",null),"\u2003","\u2003","Next, we define the boundary conditions for the simulation using the ",(0,a.kt)("inlineCode",{parentName:"p"},"boundary")," dictionary, where the x ,y and the z directions all have PML boundary conditions.",(0,a.kt)("br",null),"\u2003","\u2003","Finally, we set detailed parameters for the PML boundary using the ",(0,a.kt)("inlineCode",{parentName:"p"},"general_pml")," dictionary, specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"pml_layer"),",",(0,a.kt)("inlineCode",{parentName:"p"},"pml_kappa"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pml_sigma"),"and ",(0,a.kt)("inlineCode",{parentName:"p"},"pml_polynomial"),", which  specific the order of the polynomial.")),(0,a.kt)("h4",{id:"27--add-sub-mesh"},"2.7  Add sub-mesh"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","To achieve more accurate calculations of the model's modal fields, we can add a sub-mesh in region 5.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 5. Sub Mesh ---\nst.add_mesh(name='sub_mesh',\n            property={'general': {'dx': 0.002, 'dy': 0.002, 'dz': 0.002},\n                      'geometry': {'x': 0, 'x_span': 6, 'y': 0, 'y_span': 2, 'z': 0, 'z_span': 0.2}})\n# endregion\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In this code segment, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"add_mesh")," function to add a sub-mesh in region 5.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter defines the name of the mesh.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"general")," parameter specifies the grid accuracy in the xyz directions (in this case, 0.02 micrometers in each direction).",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"geometry")," parameter sets the coordinates of the sub-mesh.")),(0,a.kt)("h4",{id:"28--fde-simulation"},"2.8  FDE simulation"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In region 6, we add the FDE simulation module to support mode calculations and frequency scans.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 6. Simulation ---\nsimu = pj.Simulation()\nsimu.add(name=simu_name, type='FDE',\n          property={\n              # 'general': {'solver_type': '2d_x_normal'},  # default is '2d_x_normal' \n              'mesh_settings': {\n                  'global_mesh_uniform_grid': {'dy': grid, 'dz': grid},  # 'minimum_mesh_step_settings': {'min_mesh_step': 1.0e-4}\n              },\n              'fde_analysis': {\n                  'modal_analysis': {\n                      'calculate_modes': run_options.run, 'mesh_structure': True,\n                      'wavelength': wavelength, 'wavelength_offset': 0.0001, 'number_of_trial_modes': number_of_trial_modes,\n                      'search': 'max_index',  \n                      # 'n': 2,\n                      'calculate_group_index': False,\n                      'mode_removal': {'threshold': 0.02},\n                      # 'bent_waveguide': {'bent_waveguide': False, 'radius': 1, 'orientation': 0, 'location': 'simulation_center'}\n                  },\n                  \"frequency_analysis\": {\n                      \"frequency_analysis\": run_options.run_frequency_sweep,\n                      # \"start_wavelength\": 1.50, \"stop_wavelength\": 1.60, \"number_of_points\": 3,\n                      # \"effective_index\": 1, \"detailed_dispersion_calculation\": False\n                  }}})\n# endregion\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In this code segment, the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter defines the name of the simulation module.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"general")," parameter specifies the type of the simulation module within the structure. It supports the following list selection",(0,a.kt)("inlineCode",{parentName:"p"},"['2d_x_normal','2d_y_normal','2d_z_normal']"),".",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"mesh_settings")," parameter is set to the previously defined sub_mesh.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"wavelength")," parameter sets the wavelength-related parameters for the simulation.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"search")," parameter specifies the mode search type. It supports the following list selection","['near_n','max_index']",".",(0,a.kt)("br",null),"\u2003","\u2003","In this case, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"max_index")," to automatically search for the mode with max index in the structure. To use the \u2018near_n\u2019, we need to set the data in \u2018n\u2019.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"bent_waveguide")," parameter can be used to set parameters for a bent waveguide.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"frequency_analysis")," parameter allows us to set parameters for frequency scans or mode calculations with varying wavelengths.")),(0,a.kt)("h4",{id:"29--structure-schematic"},"2.9  Structure schematic"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In region 7, you can generate a schematic representation of the structure.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 7. Structure Show ---\n  st.structure_show(fig_type='png', show=False, savepath=f'{plot_path}{kL[0]}_{simu_name}', simulation_name=simu_name)\n  # simu[simu_name].show3d(show_with=\"local_gui\")\n# endregion\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In this code segment, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"structure_show")," function to form a picture.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"fig_type")," specifies the type of figure. It supports the following list selection",'["png", "svg"]',".",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," , which is a switch that controls whether the picture is generated or not.")),(0,a.kt)("h4",{id:"210--index-preview"},"2.10  Index Preview"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","And in region 8, you can generate a material refractive index plot for the structure in different cross-sectional directions(x,y,z).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 8. Mesh View ---\nif run_options.index_preview:\n    k = kL[1]\n    simu[simu_name].run_index(name=f'{simu_name}_x_0', savepath=f'{plot_path}{k}IndexPreview_x=0',\n                              # export_csv=False, show=False,\n                              property={'geometry': {'x': 0, 'x_span': 0, 'y': 0, 'y_span': 3, 'z': 0, 'z_span': 2}})\n    simu[simu_name].run_index(name=f'{simu_name}_y_0', savepath=f'{plot_path}{k}IndexPreview_y=0',\n                              # export_csv=False, show=False,\n                              property={'geometry': {'x': 0, 'x_span': 4, 'y': 0, 'y_span': 0, 'z': 0, 'z_span': 2}})\n    simu[simu_name].run_index(name=f'{simu_name}_z_0', savepath=f'{plot_path}{k}IndexPreview_z=0',\n                              # export_csv=False, show=False,\n                              property={'geometry': {'x': 0, 'x_span': 4, 'y': 0, 'y_span': 3, 'z': 0, 'z_span': 0}})\n# endregion\n")),(0,a.kt)("h4",{id:"211-run-simulation"},"2.11 Run Simulation"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In region 9, you can run the simulation. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 9. Run ---\nresult_fde = simu[simu_name].run()\n# endregion\n")),(0,a.kt)("h4",{id:"212-retrieve-results"},"2.12 Retrieve results"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In region 10, you can retrieve and store the simulation results. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 10. See Results ---\nif run_options.extract:\n    # region --- 10.1 calculate_modes ---\n    if run_options.run:\n        k = kL[2]\n        res = result_fde.extract(data=\'calculate_modes\', savepath=f\'{plot_path}{k}_neff_table\', export_csv=True)\n        print(res.to_string(index=False))\n        for m in range(len(res)):\n            k = kL[3]\n            result_fde.extract(data=\'calculate_modes\', savepath=f\'{plot_path}{k}_mode{m}\',\n                                attribute=\'Ey\', mode=m, real=True, imag=False, `export_options, show=False)\n    # endregion\n\n    if run_options.run_frequency_sweep:\n        attr_selections: List[Literal["neff", "loss", "group_index", "polarization"]] = ["neff", "loss", "group_index", "polarization"]\n        for i, a in enumerate(attr_selections):\n            k = kL[4]\n            result_fde.extract(data="frequency_analysis", savepath=f\'{plot_path}{k}_freq_sweep_{a}\',\n                                attribute=a, real=True, imag=True, export_csv=True, export_mat=True, show=False)\n# endregion\n')),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"extract")," function allows you to extract specific simulation results and store them for further analysis.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"attribute")," parameter specifies the type of simulation results to be extracted.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"mode")," parameter corresponds to the index of the FDE calculation mode.",(0,a.kt)("br",null),"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"real")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"imag")," parameters are used to extract the real and imaginary parts of the simulation results, respectively.")),(0,a.kt)("h4",{id:"213-switches"},"2.13 Switches"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","We also support control switches for various functionalities at the end of the code, you can use configuration flags(True of False). These flags can be used to enable or disable specific functionalities, making it easier to check the model and perform efficient calculations.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class RunOptions(NamedTuple):\n    index_preview: bool\n    run: bool\n    run_frequency_sweep: bool\n    extract: bool\n\n\nif __name__ == '__main__':\n    simulation(\n               run_options=RunOptions(index_preview=True,\n                                      run=True,\n                                      run_frequency_sweep=False,\n                                      extract=True)\n               )\n")),(0,a.kt)("h3",{id:"3output-results"},"3.Output results"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","1. Schematic diagram of the refractive index of the device.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC index preview",src:n(2502).Z,title:"DC index preview",width:"835",height:"225"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","2. The results of the calculation mode will be stored in a CSV format file for subsequent data processing in Python and Excel.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC data",src:n(6701).Z,title:"DC data",width:"1309",height:"348"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","3. Image of the Ey electric field component intensity in symmetric and antisymmetric mode modes.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC mode",src:n(5490).Z,title:"DC mode",width:"740",height:"289"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","4. According to the effective refractive index of the obtained mode field, Python is used for data processing and drawing.")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","\u2003","The coupling length under the gap between two waveguides is calculated with the formula:")),(0,a.kt)(r.BlockMath,{math:"L_x = \\frac{\\lambda}{2|neff_1-neff_2|}",mdxType:"BlockMath"}),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","\u2003","We can also get the coupling coefficient by the formula:")),(0,a.kt)(r.BlockMath,{math:"\\kappa = |sin(\\frac{\\pi\\delta(n)L}{\\lambda})|",mdxType:"BlockMath"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC gap,neff,Lx",src:n(9749).Z,title:"DC gap,neff,Lx",width:"841",height:"210"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","5. Similarly, we can obtain the relationship of the gap (distance) between two waveguides and the coupling coefficient, as well as the relationship of the wavelength and the coupling length.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DC gap,neff,Lx",src:n(612).Z,title:"DC gap,neff,Lx",width:"599",height:"246"})),(0,a.kt)("h2",{id:"directional-couplerfdtd-module"},"Directional Coupler(FDTD module)"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Next, we will learn how to model a Directional Coupler using the SDK and calculate the light propagation in the structure using the FDTD module."),(0,a.kt)("h3",{id:"1basic-operations-1"},"1.Basic Operations")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Similarly, after installing and configuring the environment, we import the relevant SDK code file ",(0,a.kt)("inlineCode",{parentName:"p"},"DC_FDTD.py")," and the layout ",(0,a.kt)("inlineCode",{parentName:"p"},"DC.gds")," for the model. The example library and related model code are typically stored in the directory ",(0,a.kt)("inlineCode",{parentName:"p"},"AIO_SDK/.venv_maxoptics/site-packages/maxoptics_sdk/examples"),", and the GDS file is imported into the folder ",(0,a.kt)("inlineCode",{parentName:"p"},"../examples/examples_gds"),".")),(0,a.kt)("h3",{id:"2code-description-1"},"2.Code Description"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Next, we will continue to learn about the specific functionalities corresponding to the code.")),(0,a.kt)("h4",{id:"21-define-parameters"},"2.1 Define Parameters"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Like the operations with the FDE module, after configuring the simulation wavelength, grid precision, and other parameters, we need to set the relevant parameters for simulation and parameterized modeling in Region 0. This includes defining the paths and names for the simulation files and output results, as well as specifying the path for importing the GDS layout.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 0. General Parameters ---\nl_bend=5.6 # the length of z bend\nl_beam=15 # the length of 2 beams \nl_input=2.5 # the length of input wg \nmonitor_w = 3.0\nmonitor_h = 2.0\nwaveform_name = "wv" + str(round(wavelength * 1000))\ntime_str = time.strftime("%Y%m%d_%H%M%S", time.localtime())\npath = kwargs["path"]\nsimu_name = "FDTD_DC"\nproject_name = f\'{simu_name}_{run_mode}_{time_str}\'\nplot_path = f\'{path}/plots/{project_name}/\'\ngds_file_root_path = os.path.abspath(os.path.join(path, \'..\'))\ngds_file = gds_file_root_path + "/examples_gds/DC.gds"\n# endregion\n')),(0,a.kt)("h4",{id:"22-define-materials"},"2.2 Define Materials"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Subsequently, in Region 2, we define the materials required for the simulation. Here, we directly specify the refractive indices of Si (Silicon) and SiO2 (Silicon Dioxide) materials.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 2. Material ---\nmt = pj.Material()\nmt.add_nondispersion(name="Si", data=[(3.472, 0)], order=2)\nmt.add_nondispersion(name="SiO2", data=[(1.444, 0)], order=2)\nmt.add_lib(name="Air", data=mo.Material.Air, order=2)\n# endregion\n')),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"add_nondispersion")," function serves the purpose of adding a non-dispersion material to the project in the simulation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", is specified as a list, typically in the format ","[(index real, index imag)]",". This list contains the complex refractive index values for the material, enabling the simulation to accurately model its optical properties. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Order")," parameter determines the mesh order for the material during the simulation. The function allows users to incorporate non-dispersion materials into the simulation, contributing to a comprehensive and precise optical analysis of the system under investigation.")),(0,a.kt)("h4",{id:"23-define-waveform"},"2.3 Define Waveform"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In Region 3, we define the parameters relevant to the wavelength.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# region --- 3. Waveform ---\nwv = pj.Waveform()\nwv.add(name=waveform_name, wavelength_center=wavelength, wavelength_span=wavelength_span)\n# endregion\n")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"Waveform")," function is used to retrieve the waveform manager for the current project. It allows users to access and manipulate the waveform sources used in the simulation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter specifies the name of the waveform source. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Wavelength_center")," parameter defines the center of the wavelength range for the source. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Wavelength_span")," parameter determines the span of the wavelength range for the source. ")),(0,a.kt)("h4",{id:"24-create-modelboundarysub-mesh"},"2.4 Create model\\Boundary\\Sub-mesh"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Next, similar to the procedure in the FDE module, in Region 4, we create the model by importing the GDS layout. Subsequently, in Region 5, we establish the boundary conditions. Additionally, in Region 6, we have the option to set the sub-mesh for improved precision.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    # region --- 4. Structure ---\n    st = pj.Structure(mesh_type="curve_mesh", mesh_factor=1.2, background_material=mt["SiO2"])\n    st.add_geometry(name="box", type="gds_file",\n                    property={"general": {"path": gds_file, "cell_name": "TOP", "layer_name": (1, 1)},\n                              "geometry": {"x": 0, "y": 0, "z": 0.11, "z_span": 6},\n                              "material": {"material": mt["SiO2"], "mesh_order": 1}})\n \n    st.add_geometry(name="dc", type="gds_file",\n                    property={"general": {"path": gds_file, "cell_name": "TOP", "layer_name": (0, 0)},\n                              "geometry": {"x": 0, "y": 0, "z": 0.11, "z_span": 0.22},\n                              "material": {"material": mt["Si"], "mesh_order": 2}})\n    st.add_geometry(name=\'slab\', type=\'Rectangle\',\n                    property={\'geometry\': {\'x_min\': -l_input-l_bend-l_beam/2-3, \'x_max\':l_input+l_bend+l_beam/2+3, \'y\': 0, \'y_span\': 8, \'z\': 0.045, \'z_span\': 0.09},\n                              \'material\': {\'material\': mt[\'Si\'], \'mesh_order\': 2}} )\n    # endregion\n\n    # region --- 5. Boundary ---\n    st.OBoundary(property={"geometry": {"x": 0, "x_span": 2*(l_input+l_bend+l_beam/2-0.5), "y": 0, "y_span": 6, "z": 0.11, "z_span": monitor_h},\n                           "boundary": {"x_min": "PML", "x_max": "PML", "y_min": "PML", "y_max": "PML", "z_min": "PML", "z_max": "PML"},\n                           "general_pml": {"pml_same_settings": True, "pml_kappa": 2, "pml_sigma": 0.8, "pml_layer": 8, "pml_polynomial": 3}})\n    # endregion\n\n    # region --- 6. Sub Mesh ---\n    st.add_mesh(name="sub_mesh",\n                property={"general": {"dx": 0.05, "dy": 0.02, "dz": 0.02},\n                          "geometry": {"x": 0, "x_span": 2*(l_input+l_bend+l_beam/2-0.5), "y": 0, "y_span": 6, "z": 0.11, "z_span": monitor_h}})\n    # endregion\n')),(0,a.kt)("h4",{id:"25-source"},"2.5 Source"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Next, we need to establish the light source in the input waveguide, as shown in Region 7.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 7. ModeSource ---\nsrc = pj.Source()\nsrc.add(name="source", type="mode_source", axis="x_forward",\n        property={"general": {"mode_selection": "user_select", "waveform": {"waveform_id_select": wv[waveform_name]}},\n                  "geometry": {"x": -l_input-l_beam/2-l_bend+2, "x_span": 0, "y": 1.35, "y_span": monitor_w, "z": 0.11, "z_span": monitor_h}})\n# endregion\n')),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"Source")," function is utilized to retrieve the source manager for the current project. The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," parameter specifies the type of the source and is formatted as either ",(0,a.kt)("inlineCode",{parentName:"p"},'["mode_source"] or ["gaussian_source"]'),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter represents the name assigned to the source.The ",(0,a.kt)("inlineCode",{parentName:"p"},"axis")," parameter defines the axis of the source.The ",(0,a.kt)("inlineCode",{parentName:"p"},"property")," parameter allows for the definition of specific properties associated with the source.")),(0,a.kt)("h4",{id:"26-monitor"},"2.6 Monitor"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In Region 8, we set up the monitors. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 8. Monitor ---\n  # region --- 8.0 GlobalMonitor ---\n  mn = pj.Monitor()\n  mn.add(name="Global Option", type="global_option",\n          property={"frequency_power": {"spacing_type": "wavelength", "spacing_limit": "center_span",   # ["min_max","center_span"]\n                                        "wavelength_center": wavelength, "wavelength_span": , "frequency_points": 3}})\n  # endregion\n\n  # region --- 8.2 input ---\n  mn.add(\n    type="power_monitor",\n    name="input_reflect",\n    property={"general": {"frequency_profile": {"wavelength_center": wavelength, "wavelength_span": 0.1, "frequency_points": 3}},\n              "geometry": {"monitor_type": "2d_x_normal", "x": -l_input-l_beam/2-l_bend+1.5, "x_span": 0, "y": 1.35, "y_span": monitor_w, "z": 0.11, "z_span": monitor_h},\n              \'mode_expansion\': {"enable": True, \'direction\': \'positive\',\n                                  \'mode_calculation\': {\'mode_selection\': \'user_select\', \'mode_index\': [0]}}})\n  # endregion\n# endregion\n')),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","For the global monitor, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Monitor")," function is utilized to retrieve the monitor manager for the current project, which allows users to access and manage various types of monitors used during simulation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter represents the name of the Global Option associated with the monitor. The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," parameter defines the type of the Global Option and is formatted as a list containing one of several monitor types, such as ",(0,a.kt)("inlineCode",{parentName:"p"},'["electric_monitor"], ["current_monitor"], ["charge_monitor"], ["band_monitor"], ["profile_monitor"], ["global_monitor", "global_option"], ["time_monitor"], ["power_monitor"], or ["mode_expansion"]'),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"property")," parameter is used to define and set the relevant parameters specific to the chosen monitor type. These parameters control the behavior and data collection settings of the monitor during the simulation. ")),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","For the power monitor, the power monitor is a configuration setting that allows users to specify various simulation parameters.The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter is used to assign a name to the power monitor.The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," parameter defines the type of power monitor. The ",(0,a.kt)("inlineCode",{parentName:"p"},"general")," parameter pertains to settings related to the frequency domain and frequency-dependent behaviors of the simulation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"geometry")," parameter is used to define the geometric characteristics of the simulated structure.The ",(0,a.kt)("inlineCode",{parentName:"p"},"mode_expansion")," parameter involves relevant settings for mode expansion simulations. By utilizing these input parameters, users can customize the simulation settings to achieve accurate and comprehensive results based on their specific simulation requirements.")),(0,a.kt)("h4",{id:"27-fdtd-simulation"},"2.7 FDTD simulation"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In\xa0Region\xa09,\xa0we\xa0add\xa0the\xa0FDTD\xa0simulation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    # region --- 9. Simulation ---\n    simu = pj.Simulation()\n    simu.add(name=simu_name, type="FDTD",\n             property={"general": {"simulation_time": 1000},\n                       "mesh_settings": {"mesh_accuracy": {"cells_per_wavelength": grids_per_lambda, },\n                                         "minimum_mesh_step_settings": {"min_mesh_step": 0.01}}})\n\n    # endregion\n')),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","The ",(0,a.kt)("inlineCode",{parentName:"p"},"Simulation")," manager is a critical component for setting up and running simulations in the current project. The ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter allows users to assign a unique name to the simulation for identification purposes. The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," parameter defines the type of the simulation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"simulation_time")," parameter specifies the duration of the simulation.The ",(0,a.kt)("inlineCode",{parentName:"p"},"mesh_settings")," parameter enables users to configure various settings related to the simulation mesh. The ",(0,a.kt)("inlineCode",{parentName:"p"},"mesh_accuracy")," parameter controls the precision of the mesh used in the simulation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"cells_per_wavelength")," parameter determines the wavelength precision used in the simulation The ",(0,a.kt)("inlineCode",{parentName:"p"},"minimum_mesh_step_settings")," parameter sets the minium mesh step, allowing users to define the smallest allowable size for mesh elements. By utilizing these input parameters, users can tailor the simulation setup to meet their specific requirements, enabling accurate and efficient electromagnetic simulations of complex optical structures.")),(0,a.kt)("h4",{id:"28--schematic-of-structure"},"2.8  Schematic of Structure"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","As the same, we generate the device structure of the Directional Coupler in Region 10")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 10. Structure Show ---\n  st.structure_show(fig_type="png", show=False, savepath=plot_path + simu_name, simulation_name=simu_name)\n# endregion\n')),(0,a.kt)("h4",{id:"29--calculate-source"},"2.9  Calculate Source"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","To calculate the input mode lightand save its electric field intensity data in region 11.  ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 11. Calculate Mode ---\nif run_options.calculate_modes:\n    simu.add(name=simu_name+"_cal_mode", type="mode_selection:user_select", simulation_name=simu_name, source_name="source",\n              property={"modal_analysis": {"mesh_structure": True, "calculate_modes": True,\n                                          "wavelength": wavelength, "number_of_trial_modes": 10, "search": "max_index", "calculate_group_index": True}})\n    src_res = simu[simu_name+"_cal_mode"].run()\n    src_res.extract(data="calculate_modes", savepath=plot_path + "00_source_modeprofile_fdeonly",\n                    mode=0, attribute="E", export_csv=True)\n# endregion\n')),(0,a.kt)("h4",{id:"210--run-simulation"},"2.10  Run Simulation"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","Then,\xa0in\xa0Region\xa012,\xa0we\xa0run\xa0the\xa0simulation.\xa0")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 12. Run ---\nif run_options.run:\n    fdtd_res = simu[simu_name].run(\n        # resources={"compute_resources": "gpu", "gpu_devices": [{"id": 0}]}\n    )\n# endregion\n')),(0,a.kt)("h4",{id:"211--results"},"2.11  Results"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","In Region 13, we define the desired output results. Lastly, we control the switches of various functional modules at the end of the Python file.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# region --- 13. See Results ---\nif run_options.extract and run_options.run:\n    # region --- z_normal ---\n    """ 01_top_profile """\n    for \u03bb in [1.5, 1.55, 1.6]:\n        fdtd_res.extract(data="fdtd:power_monitor", savepath=plot_path + "01_top_profile_" + str(\u03bb) + "um",\n                          monitor_name="z_normal", target="intensity", attribute="E", wavelength=str(\u03bb), export_csv=True)\n    # endregion\n\n    # region --- through ---\n    """ 01_monitorThrough_modeprofile_fdtd """\n    fdtd_res.extract(data="fdtd:power_monitor", savepath=plot_path + "01_monitorThrough_modeprofile_fdtd",\n                      monitor_name="output_up", target="intensity", attribute="E", export_csv=True)\n\n    """ 02_Trans_ThroughVsLambda_power """\n    fdtd_res.extract(data="fdtd:power_monitor", savepath=plot_path + "02_Trans_ThroughVsLambda_power",\n                      monitor_name="output_up", attribute="T", target="line", plot_x="wavelength", export_csv=True)\n\n    """ 021_ME_ThroughVsLambda_mode """\n    fdtd_res.extract(data="fdtd:mode_expansion", savepath=plot_path + "021_ME_ThroughVsLambda_mode",\n                      monitor_name="output_up", attribute="t_forward", target="line", plot_x="wavelength", mode=0, export_csv=True)\n    # endregion\n\n    # region --- cross ---\n    """ 01_monitorThrough_modeprofile_fdtd """\n    fdtd_res.extract(data="fdtd:power_monitor", savepath=plot_path + "01_monitorCross_modeprofile_fdtd",\n                      monitor_name="output_down", target="intensity", attribute="E", export_csv=True)\n\n    """ 02_Trans_ThroughVsLambda_power """\n    fdtd_res.extract(data="fdtd:power_monitor", savepath=plot_path + "02_Trans_CrossVsLambda_power",\n                      monitor_name="output_down", attribute="T", target="line", plot_x="wavelength", export_csv=True)\n\n    """ 021_ME_ThroughVsLambda_mode """\n    fdtd_res.extract(data="fdtd:mode_expansion", savepath=plot_path + "021_ME_CrossVsLambda_mode",\n                      monitor_name="output_down", attribute="t_forward", target="line", plot_x="wavelength", mode=0, export_csv=True)\n    # endregion\n')),(0,a.kt)("h4",{id:"211--switches"},"2.11  Switches"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","At the end of all codes, We control the switches of various functional modules at the end of the Python file.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'class RunOptions(NamedTuple):\n    index_preview: bool\n    calculate_modes: bool\n    run: bool\n    extract: bool\n\n\nif __name__ == "__main__":\n    simulation(\n               run_options=RunOptions(index_preview=True, calculate_modes=True, run=True, extract=True))\n')),(0,a.kt)("h3",{id:"3output-results-1"},"3.Output results"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","After running the program, we can obtain a series of corresponding output results:"),(0,a.kt)("p",null,"\u2003","\u2003","1.Incident light electric field intensity, Cross output port electric field intensity, and TRU output port electric field intensity.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"FDTD mode",src:n(263).Z,title:"FDTD mode",width:"1478",height:"431"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","2.DC (Directional Coupler)  Z-direction electric field intensity at different wavelengths: 1.5 \u03bcm, 1.55 \u03bcm, and 1.6 \u03bcm.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"FDTD mode",src:n(146).Z,title:"FDTD mode",width:"1367",height:"390"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","3.Cross output port and TRU output port transmittance at different wavelengths: 1.5 \u03bcm, 1.55 \u03bcm, and 1.6 \u03bcm.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"FDTD mode",src:n(7186).Z,title:"FDTD mode",width:"1180",height:"478"})),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003","4.TE0 mode transmittance at Cross output port and TRU output port for different wavelengths: 1.5 \u03bcm, 1.55 \u03bcm, and 1.6 \u03bcm.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"FDTD mode",src:n(8785).Z,title:"FDTD mode",width:"1364",height:"471"})),(0,a.kt)("h2",{id:"supplement"},"Supplement"),(0,a.kt)("div",{class:"text-justify"},(0,a.kt)("p",null,"\u2003","\u2003",'To view the definition and supported parameters of a function, you can right-click on a function name and select "Go to Definition"  or press "Ctrl" while left-clicking on the function name to view its definition, showing the available  parameters  and their descriptions.  ')))}c.isMDXComponent=!0},6701:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_dataout-7f2ddd60627ba38b7c7df7cd9c2eefc3.png"},2248:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_gds-e90b2f1b03db289dbf023cbc09863ace.png"},2502:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_index_str-f6db0dc9f9f2ebe2bdf4cf2285302a30.png"},1235:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_intro-9a7b08bf1007a1a31765c92a600517ac.png"},5490:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_modeEy-f368d3d4c46ed54d43610ef433717898.png"},9749:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_mode_pic-68ef07e7c17e32034cd99ecabfd05c4b.png"},612:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DC_mode_pic2-c23496bf4944b980b940a006b16418d6.png"},263:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/fdtd_mode-db99e30c7581975b97e60682c471e7a1.png"},7186:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/fdtd_wavesweep-8637f780789d04db66cd315ead0b5449.png"},8785:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/fdtd_wavesweep2-d4afe23741c88b6de877c0b7129f4ea0.png"},146:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/fdtd_zplot-d847d95acaed7b9337ae191156d64210.png"}}]);