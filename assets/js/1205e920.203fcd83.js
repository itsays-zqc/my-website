"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1090],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>g});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),c=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=c(t.components);return n.createElement(d.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),p=c(a),u=r,g=p["".concat(d,".").concat(u)]||p[u]||m[u]||l;return a?n.createElement(g,i(i({ref:e},s),{},{components:a})):n.createElement(g,i({ref:e},s))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[p]="string"==typeof t?t:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},60443:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const l={},i="Material",o={unversionedId:"test/v2_core/1Material",id:"test/v2_core/1Material",title:"Material",description:"In this section, the code instructions aim to assist you in adding the required simulation materials into your simulation project. We can use this module with the code mt = pj.Material() .",source:"@site/docs/test/v2_core/1Material.md",sourceDirName:"test/v2_core",slug:"/test/v2_core/1Material",permalink:"/my-website/docs/test/v2_core/1Material",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/test/v2_core/1Material.md",tags:[],version:"current",frontMatter:{},sidebar:"testSidebar",previous:{title:"Max-Optics SDK",permalink:"/my-website/docs/category/max-optics-sdk"},next:{title:"Structure",permalink:"/my-website/docs/test/v2_core/2Structure"}},d={},c=[{value:"1.1 Add anisotropy material",id:"11-add-anisotropy-material",level:2},{value:"1.2 Add dispersion material",id:"12-add-dispersion-material",level:2},{value:"1.3 Add material in Max-Optics material library",id:"13-add-material-in-max-optics-material-library",level:2},{value:"1.4 Add nondispersion material",id:"14-add-nondispersion-material",level:2}],s={toc:c},p="wrapper";function m(t){let{components:e,...a}=t;return(0,r.kt)(p,(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"material"},"Material"),(0,r.kt)("font",{face:"Calibri"},(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"In this section, the code instructions aim to assist you in adding the required simulation materials into your simulation project. We can use this module with the code ",(0,r.kt)("inlineCode",{parentName:"p"},"mt = pj.Material() "),". "),(0,r.kt)("p",null,"These instructions enable you to incorporate dispersion/non-dispersion materials and anisotropic materials into the simulation project. Additionally, you have the options to directly access the necessary materials from the Max-Optics material library."),(0,r.kt)("h2",{id:"11-add-anisotropy-material"},"1.1 Add anisotropy material"),(0,r.kt)("p",null,"Add anisotropy material to a project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'add_anisotropy(\n            self,\n            *,\n            name: str,\n            data: List[\n                Tuple[\n                    float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float],\n            ],\n            color: Optional[str] = None,\n            alpha: Optional[float] = None,\n            fitting: Literal[None, "linear"],\n            order: int = 2,\n            )\n')),(0,r.kt)("table",{align:"center"},(0,r.kt)("tr",null,(0,r.kt)("th",{align:"center"},"Parameters"),(0,r.kt)("th",{align:"center"},"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"name"),(0,r.kt)("td",{align:"center"},"The name of material in the project.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"data"),(0,r.kt)("td",{align:"center"},"Material data. Format is [(wavelength, xx index real, xx index imag, yy index real, yy index imag, zz index real, zz index imag), \u2026] or [(wavelength, xx index real, xx index imag, xy index real, xy index imag, \u2026), \u2026].")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"color"),(0,r.kt)("td",{align:"center"},"The color of materials in the visual model. If it is not set, the color will be automatically calculated based on the refractive index.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"fitting"),(0,r.kt)("td",{align:"center"},"The fitting mode of material data.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"order"),(0,r.kt)("td",{align:"center"},"The coverage order of materials when modeling a geometric structure."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mt = pj.Material()\nmt.add_anisotropy(name="LN", fitting=None,\n      data=[(wavelength * 1e-6, 2.211, 0, 2.138, 0, 2.211, 0)], order=2\n      )\n')),(0,r.kt)("h2",{id:"12-add-dispersion-material"},"1.2 Add dispersion material"),(0,r.kt)("p",null,"Add dispersion material to a project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'add_dispersion(\n            self,\n            *,\n            name: str,\n            data: List[\n                Tuple[float, float, float],\n            ],\n            color: Optional[str] = None,\n            alpha: Optional[float] = None,\n            fitting: Literal[None, "linear"],\n            order: int = 2\n            )\n')),(0,r.kt)("table",{align:"center"},(0,r.kt)("tr",null,(0,r.kt)("th",{align:"center"},"Parameters"),(0,r.kt)("th",{align:"center"},"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"name"),(0,r.kt)("td",{align:"center"},"The name of material in the project.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"data"),(0,r.kt)("td",{align:"center"},"Material data. Format is [(wavelength, index real, index imag), \u2026].")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"color"),(0,r.kt)("td",{align:"center"},"The color of materials in the visual model. If it is not set, the color will be automatically calculated based on the refractive index.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"fitting"),(0,r.kt)("td",{align:"center"},"The fitting mode of material data.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"order"),(0,r.kt)("td",{align:"center"},"The coverage order of materials when modeling a geometric structure."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mt = pj.Material()\nmt.add_dispersion(name="SiO2",\n    data=[(1.55e-06, 1.444, 0), (1.30e-06, 1.81, 0.227)], order=2\n    )\n')),(0,r.kt)("h2",{id:"13-add-material-in-max-optics-material-library"},"1.3 Add material in Max-Optics material library"),(0,r.kt)("p",null,"Add material in the Max-Optics material library to a project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"add_lib(\n            self,\n            *,\n            name: str,\n            data: Any,\n            override: Optional[dict]=None,\n            color: Optional[str] = None,\n            alpha: Optional[float] = None,\n            order: int = 2\n            )\n")),(0,r.kt)("table",{align:"center"},(0,r.kt)("tr",null,(0,r.kt)("th",{align:"center"},"Parameters"),(0,r.kt)("th",{align:"center"},"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"name"),(0,r.kt)("td",{align:"center"},"The name of material in the project.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"data"),(0,r.kt)("td",{align:"center"},"An existing material in the library.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"override"),(0,r.kt)("td",{align:"center"},"Override.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"color"),(0,r.kt)("td",{align:"center"},"The color of materials in the visual model. If not set, the color will be automatically calculated based on the index parameters.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"order"),(0,r.kt)("td",{align:"center"},"The coverage order of materials when modeling a geometric structure."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mt = pj.Material()\nmt.add_lib(name="Air", data=mo.Material.Air, order=2)\n')),(0,r.kt)("h2",{id:"14-add-nondispersion-material"},"1.4 Add nondispersion material"),(0,r.kt)("p",null,"Add non-dispersion material to a project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"add_nondispersion(\n        self,\n        *,\n        name: str,\n        data: List[Tuple[float, float]],\n        color: Optional[str] = None,\n        alpha: Optional[float] = None,\n        order: int = 2\n        )\n")),(0,r.kt)("table",{align:"center"},(0,r.kt)("tr",null,(0,r.kt)("th",{align:"center"},"Parameters"),(0,r.kt)("th",{align:"center"},"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},(0,r.kt)("strong",null,"name")),(0,r.kt)("td",{align:"center"},"The name of material in the project.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},(0,r.kt)("strong",null,"data")),(0,r.kt)("td",{align:"center"},"Material data. Format is [(index real, index imag)].")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},(0,r.kt)("strong",null,"color")),(0,r.kt)("td",{align:"center"},"The color of materials in the visual model. If not set, the color will be automatically calculated based on the refractive index.")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},(0,r.kt)("strong",null,"order")),(0,r.kt)("td",{align:"center"},"The coverage order of materials when modeling a geometric structure."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mt = pj.Material()\nmt.add_nondispersion(name="SiO2", data=[(1.444, 0)], order=1)\n')))))}m.isMDXComponent=!0}}]);