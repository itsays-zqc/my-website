"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4873],{74811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>d,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),l=n(87617);const i={},o="Microring Resonator",d={unversionedId:"examples/PIC/MicroringResonator/MicroringResonator",id:"examples/PIC/MicroringResonator/MicroringResonator",title:"Microring Resonator",description:"Introduction",source:"@site/docs/examples/PIC/MicroringResonator/MicroringResonator.md",sourceDirName:"examples/PIC/MicroringResonator",slug:"/examples/PIC/MicroringResonator/",permalink:"/my-website/docs/examples/PIC/MicroringResonator/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/PIC/MicroringResonator/MicroringResonator.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesSidebar",previous:{title:"1X2 MMI",permalink:"/my-website/docs/examples/PIC/MMI/"},next:{title:"Polarization split rotator",permalink:"/my-website/docs/examples/PIC/PolarizationSplitRotator/"}},s={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Simulation",id:"simulation",level:2},{value:"1 Code Description",id:"1-code-description",level:3},{value:"1.1 Import Toolkit",id:"11-import-toolkit",level:4},{value:"1.2  Define Simulation Function and parameters",id:"12--define-simulation-function-and-parameters",level:4},{value:"1.3 Create project",id:"13-create-project",level:4},{value:"1.4 Add Material",id:"14-add-material",level:4},{value:"1.5 Add waveform",id:"15-add-waveform",level:4},{value:"1.6 Add Structure",id:"16-add-structure",level:4},{value:"1.7 Set Boundary",id:"17-set-boundary",level:4},{value:"1.8 Add source",id:"18-add-source",level:4},{value:"1.9 Add Solver",id:"19-add-solver",level:4},{value:"1.10 Add Monitor",id:"110-add-monitor",level:4},{value:"1.11 View Structure",id:"111-view-structure",level:4},{value:"1.12 Run",id:"112-run",level:4},{value:"1.13 Run and Extract Results",id:"113-run-and-extract-results",level:4},{value:"1.14 Control Switch",id:"114-control-switch",level:4},{value:"2. Output results",id:"2-output-results",level:3},{value:"Length of ring",id:"length-of-ring",level:4},{value:"Couple length and gap",id:"couple-length-and-gap",level:4},{value:"transmission",id:"transmission",level:4},{value:"References",id:"references",level:2}],p={toc:m},u="wrapper";function g(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"microring-resonator"},"Microring Resonator"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(98013).Z,width:"5669",height:"2126"}),"\nMicroring resonators are important filtering devices in photonic integrated circuits, high performance filters require a wide free spectrum range(FSR) and high quality factor. Obtaining a large spectral range requires the use of a small radius, but too small a radius can cause bending loss and reduce the quality factor. In order to meet the requirements of free spectrum range and quality factor, it is necessary to design the size  of the ring and coupling efficiency."),(0,r.kt)("p",null,"In this example, we demonstrate the use of a finite difference eigenmode(FDE) solver to calculate the group refractive index of an optical waveguide, then calculate the effective refractive index of symmetric and anti symmetric modes in the coupling region between the optical waveguide and the ring resonator, and finally use 3D FDTD simulation to calculate the transmittance of the drop port."),(0,r.kt)("h2",{id:"simulation"},"Simulation"),(0,r.kt)("h3",{id:"1-code-description"},"1 Code Description"),(0,r.kt)("h4",{id:"11-import-toolkit"},"1.1 Import Toolkit"),(0,r.kt)("p",null,"First, we need to import ",(0,r.kt)("inlineCode",{parentName:"p"},"maxoptics_sdk")," and Python's third-party package. The import module for FDE and FDTD simulation are shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List, Literal, NamedTuple\nimport time\nimport maxoptics_sdk.all as mo\nfrom maxoptics_sdk.helper import timed, with_path\n")),(0,r.kt)("h4",{id:"12--define-simulation-function-and-parameters"},"1.2  Define Simulation Function and parameters"),(0,r.kt)("p",null,"To facilitate parameter changes, we can define function to encapsulate the entire simulation project. Before starting the simulation, you can define variables to control the parameters. Set as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def simulation(*, run_mode, wavelength, grid, number_of_trial_modes, run_options: "RunOptions", **kwargs):\n    # region --- 0. General Parameters ---\n    time_str = time.strftime("%Y%m%d_%H%M%S", time.localtime())\n    path = kwargs["path"]\n    simu_name = f"Microring_FDE"\n    project_name = f"{simu_name}_{run_mode}_{time_str}"\n    plot_path = f\'{kwargs.get("plot_dir", path)}/plots/{project_name}/\'\n    kL = [f"0{k}" for k in range(5)]\n    export_options = {"export_csv": True, "export_mat": True, "export_zbf": True}\n    # endregion\n\n')),(0,r.kt)("h4",{id:"13-create-project"},"1.3 Create project"),(0,r.kt)("p",null,"You can create a new project using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Project")," function of Max's software development toolkit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# region --- 1. Project ---\npj = mo.Project(name=project_name, location=run_mode,)\n# endregion\n")),(0,r.kt)("h4",{id:"14-add-material"},"1.4 Add Material"),(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null," Here we demonstrate using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Material")," function to create material and using the ",(0,r.kt)("inlineCode",{parentName:"p"},"add_lib")," function to add materials from the material library. You can refer to the following script to set material.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# region --- 2. Material ---\nmt = pj.Material()\nmt.add_lib(name="Si", data=mo.Material.Si_Palik, order=2)\nmt.add_lib(name="SiO2", data=mo.Material.SiO2_Palik, order=2)\n# endregion\n')),(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is used to define the name of the added material.",(0,r.kt)("br",null),"The ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," is used to receive refractive index data extracted from the material library.",(0,r.kt)("br",null),"The ",(0,r.kt)("inlineCode",{parentName:"p"},"order")," is used to set the material priority of the grid.")),(0,r.kt)("h4",{id:"15-add-waveform"},"1.5 Add waveform"),(0,r.kt)("p",null,"Adding a light source for simulating in 3D FDTD, and we use ",(0,r.kt)("inlineCode",{parentName:"p"},"Waveform")," to set the waveform parameters of the light source."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# region --- 3. Waveform ---\nwv = pj.Waveform()\nwv.add(name=waveform_name, wavelength_center=wavelength, wavelength_span=0.1)\n# endregion\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," sets the name of the waveform, ",(0,r.kt)("inlineCode",{parentName:"p"},"wavelength_center")," sets the center wavelength of the light source, and ",(0,r.kt)("inlineCode",{parentName:"p"},"wavelength_span")," sets the wavelength range of the light source."),(0,r.kt)("h4",{id:"16-add-structure"},"1.6 Add Structure"),(0,r.kt)("div",{class:"text-justify"},"Microring resonator is typical filter for Soi waveguide, including two straight optical waveguides and a coupled ring-shaped waveguide.",(0,r.kt)("p",null,"We use ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure")," to create structure , where ",(0,r.kt)("inlineCode",{parentName:"p"},"mesh_type")," is the type of mesh, ",(0,r.kt)("inlineCode",{parentName:"p"},"mesh_factor")," is the growth factor of the mesh, and ",(0,r.kt)("inlineCode",{parentName:"p"},"background_material")," is the background material of the structure. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"add_geometry")," function to add geometric structures and select the type from the structural components. The specific properties can be set as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# region --- 4. Structure ---\nst = pj.Structure(mesh_type="curve_mesh", mesh_factor=1.2, background_material=mt["SiO2"])\nst.add_geometry(name="ring", type="Ring",property={"material": {"material": mt["Si"], "mesh_order": 3},\n                    "geometry": {"x": 0, "y": 0, "z": 0, "z_span": 0.22,"inner_radius": 2.6, "outer_radius": 3}})\nst.add_geometry(name="waveguide1", type="Rectangle",\n                property={"geometry": {"x": 0, "x_span":15, "y": 3.3, "y_span": 0.4, "z": 0, "z_span": 0.22},\n                            "material": {"material": mt["Si"], "mesh_order":3}} )\nst.add_geometry(name="waveguide2", type="Rectangle",\n                property={"geometry": {"x": 0, "x_span":15, "y": -3.3, "y_span": 0.4, "z": 0, "z_span": 0.22},\n                            "material": {"material": mt["Si"], "mesh_order":3}} )\nst.add_geometry(name="substrate", type="Rectangle",\n                property={"geometry": {"x": 0, "x_span":15, "y": 0, "y_span": 10, "z_min": -3, "z_max": -0.11},\n                            "material": {"material": mt["SiO2"], "mesh_order":3}} )\n# endregion                           \n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"ring"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"name the added geometry")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"Ring"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"select the type of structure")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x","\u2003","\u2003","\u2003","\u2003"),(0,r.kt)("td",{parentName:"tr",align:null},"0","\u2003","\u2003","\u2003","\u2003"),(0,r.kt)("td",{parentName:"tr",align:null},"float","\u2003","\u2003","\u2003","\u2003"),(0,r.kt)("td",{parentName:"tr",align:null},"center position in the x-direction of the geometric structure ","\xa0","\u2003","\u2003","\u2003","\u2003","\u2003","\u2003")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"material"),(0,r.kt)("td",{parentName:"tr",align:null},"mt",'["Si"]'),(0,r.kt)("td",{parentName:"tr",align:null},"material"),(0,r.kt)("td",{parentName:"tr",align:null},"select the material added Materials")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mesh_order"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"set the priority of the material")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"the center coordinate of the ring in the x-direction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"the center coordinate of the ring in the y-direction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"z"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"the center coordinate of the ring in the z-direction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"z_span"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"the thickness of the ring in the z-direction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"inner_radius"),(0,r.kt)("td",{parentName:"tr",align:null},"2.6"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"the size of the inner radius of the ring")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"outer_radius"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"the size of the outer radius of the ring")))),(0,r.kt)("p",null,"The properties of ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle")," can refer to the settings of the Ring. Select simulation material by using ",(0,r.kt)("inlineCode",{parentName:"p"},"mesh_order")," in areas where geometry overlaps, the priority of structural materials needs to be higher than that of background material."),(0,r.kt)("h4",{id:"17-set-boundary"},"1.7 Set Boundary"),(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"Set the boundary size of the simulation structure using optical boundary condition ",(0,r.kt)("inlineCode",{parentName:"p"},"OBoundary"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"geometry")," to set the size and position of the boundary, and use ",(0,r.kt)("inlineCode",{parentName:"p"},"boundary")," to set the boundary conditions at the boundary. The boundary properties of FDE and FDTD are set as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# region --- 5. Boundary ---\nif run_options.run_fde:\n    st.OBoundary(property={"geometry": {"x": -4, "x_span": 0, "y": -3.3, "y_span": 3, "z": 0, "z_span": 3},\n                        "boundary": {"y_min": "PEC", "y_max": "PEC", "z_min": "PEC", "z_max": "PEC"}})\nif run_options.run_fdtd:\n    st.OBoundary(property={"geometry": {"x": 0, "x_span": 9, "y": 0, "y_span": 9, "z": 0, "z_span": 3},\n                        "boundary": {"x_min": "PML", "x_max": "PML", "y_min":"PML", "y_max":"PML", "z_min": "PML", "z_max": "PML"}})\n# endregion\n')),(0,r.kt)("h4",{id:"18-add-source"},"1.8 Add source"),(0,r.kt)("div",{class:"text-justify"},"In 3D FDTD simulation, a light source is required. We use `Source` to create the light source and `add` to add the required light source. The settings for the light source are as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# region --- 6. Source ---\nsrc = pj.Source()\nif run_options.run_fdtd:\n    src.add(name="modesource",type="mode_source",axis="x_forward",property={\n        "general":{"mode_selection":"user_select","waveform":{"waveform_id_select":wv[waveform_name]}},\n        "geometry":{"x":-4,"x_span":0,"y":3.3,"y_span":2,"z":0,"z_span":2}})\n# endregion\n')),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," to select the type of light source, and ",(0,r.kt)("inlineCode",{parentName:"p"},"axis")," to set the direction of the mode light source."),(0,r.kt)("h4",{id:"19-add-solver"},"1.9 Add Solver"),(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"We use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulation")," function to create a simulation and the ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," function to add a solver. The properties settings of FDE and FDTD solvers are as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# region --- 7. Simulation ---\nsimu = pj.Simulation()\nif run_options.run_fde:\n    simu.add(name=simu_name, type="FDE",\n            property={\n                "general": {"solver_type": "2d_x_normal"},  # default is "2d_x_normal" ["2d_x_normal","2d_y_normal","2d_z_normal"]\n                "mesh_settings": {\n                    "global_mesh_uniform_grid": {"dy": grid, "dz": grid},  # "minimum_mesh_step_settings": {"min_mesh_step": 1.0e-4}\n                },\n                "fde_analysis": {\n                    "modal_analysis": {\n                        "calculate_modes": run_options.run_fde, "mesh_structure": False,\n                        "wavelength": wavelength, "wavelength_offset": 0.0001, "number_of_trial_modes": number_of_trial_modes,\n                        "search": "max_index", "calculate_group_index": True,\n                        "mode_removal": {"threshold": 0.02}}}})\n                     \nif run_options.run_fdtd:\n    simu.add(name=simu_name, type=\'FDTD\',\n            property={\'general\': {\'simulation_time\': 5000 },\n                    \'mesh_settings\': {\'mesh_type\': \'auto_non_uniform\',\n                                        \'mesh_accuracy\': {\'cells_per_wavelength\': grids_per_lambda},\n                                        \'minimum_mesh_step_settings\': {\'min_mesh_step\': 1e-4}},\n                    \'advanced_options\': {\'auto_shutoff\': {\'auto_shutoff_min\': 1.00e-4, \'down_sample_time\': 200}},\n                    \'thread_setting\': {\'thread\': 12}\n                    })\n# endregion\n\n')),(0,r.kt)("p",null,"The properties settings for the FDE solver are as follows."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"solver_type"),(0,r.kt)("td",{parentName:"tr",align:null},"2d_x_normal"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"select the solution plane")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dy"),(0,r.kt)("td",{parentName:"tr",align:null},"grid"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"grid size along the y-direction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dz"),(0,r.kt)("td",{parentName:"tr",align:null},"grid"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"grid size along the z-direction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"calculate_modes"),(0,r.kt)("td",{parentName:"tr",align:null},"run_options.run_fde"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"choose whether to calculate the mode of the waveguide")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mesh_structure"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"choose whether to calculate the refractive index distribution of the structure")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"wavelength"),(0,r.kt)("td",{parentName:"tr",align:null},"wavelength"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"solve the wavelength of the mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"number_of_trial_modes"),(0,r.kt)("td",{parentName:"tr",align:null},"number_of_trial_modes"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"number of solving modes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"search"),(0,r.kt)("td",{parentName:"tr",align:null},"max_index"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'choose "max_index" or "near_n" for finding modes')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"calculate_group_index"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"choose whether to calculate the group refractive index")))),(0,r.kt)("p",null,"The properties settings for the FDTD solver are as follows."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"simulation_time"),(0,r.kt)("td",{parentName:"tr",align:null},"5000"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"set the maximum simulation time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mesh_type"),(0,r.kt)("td",{parentName:"tr",align:null},"auto_non_uniform"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"select 'auto_non_uniform' or 'uniform' to set the type of grid")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cells_per_wavelength"),(0,r.kt)("td",{parentName:"tr",align:null},"grids_per_lambda"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"set the size of the grid")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_mesh_step"),(0,r.kt)("td",{parentName:"tr",align:null},"1e-4"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"Set the minimum grid size")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"auto_shutoff_min"),(0,r.kt)("td",{parentName:"tr",align:null},"1.e-4"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"set the convergence threshold of energy and the condition for terminating the simulation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"down_sample_time"),(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"thread"),(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"number of threads allocated to run the program")))),(0,r.kt)("p",null,"In the settings of the FDE solver, use ",(0,r.kt)("inlineCode",{parentName:"p"},"calculate_ Modes")," controls whether to calculate the mode. Note that we need to calculate the group refractive index of the waveguide and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"calculate_ group_index"),"  to True."),(0,r.kt)("p",null,"In the setting of the FDTD solver, ",(0,r.kt)("inlineCode",{parentName:"p"},"simulation_time")," is used to control the simulation time. We set the simulation time to 5000fs, which is greater than the default value of 1000fs. The microring resonator is a resonance with a high quality factor. If the simulation time is set too small and the simulation stops before the field decays, the results obtained are incorrect."),(0,r.kt)("h4",{id:"110-add-monitor"},"1.10 Add Monitor"),(0,r.kt)("p",null,"In the simulation, ",(0,r.kt)("inlineCode",{parentName:"p"},"Monitor"),"function is used to create monitor and ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," function is used to add a monitor. By using ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," to select a power monitor, the transmittance and field distribution of the cross-section can be obtained. It is necessary to add a time monitor to check the field strength at the end of the simulation to determine the accuracy of the simulation results."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# region --- 8. Monitor ---  \nmn = pj.Monitor()\nmn.add(name='time_monitor1', type='time_monitor',\n        property={'general': {\n            'stop_method': 'end_of_simulation', 'start_time': 0, 'stop_time': 100, 'number_of_snapshots': 0},\n            'geometry': {'monitor_type': 'point', 'x': 0, 'x_span': 0, 'y': 0, 'y_span': 0, 'z': 0, 'z_span': 0},\n            'advanced': {'sampling_rate': {'min_sampling_per_cycle': 10}}})\nmn.add(name='x_normal', type='power_monitor',property={'general': {\n            'frequency_profile': {'wavelength_center': wavelength, 'wavelength_span': 0.1, 'frequency_points': 300}, },\n            'geometry': {'monitor_type': '2d_x_normal',\n                        'x': -4, 'x_span': 0, 'y': -3.3, 'y_span': 2, 'z': 0, 'z_span': 2}})\nmn.add(name='z_normal', type='power_monitor',property={'general': {\n            'frequency_profile': {'wavelength_center': wavelength, 'wavelength_span': 0.1, 'frequency_points': 100}, },\n            'geometry': {'monitor_type': '2d_z_normal',\n                        'x': 0, 'x_span': 9, 'y': 0, 'y_span': 9, 'z': 0, 'z_span': 0}})\n#endregion\n")),(0,r.kt)("h4",{id:"111-view-structure"},"1.11 View Structure"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"structure_show")," function to view the top view of the structure, or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"simu[simu_name].show3d()")," call gui to view the structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# region --- 9. Structure Show ---\nst.structure_show(fig_type="png", show=False, savepath=f"{plot_path}{kL[0]}_{simu_name}", simulation_name=simu_name)\n#simu[simu_name].show3d()\n# endregion\n')),(0,r.kt)("h4",{id:"112-run"},"1.12 Run"),(0,r.kt)("p",null,"Pass in the name of the simulation and use ",(0,r.kt)("inlineCode",{parentName:"p"},"simu[simu_name].run")," function to run the simulation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# region --- 10. Run ---\neme_res = simu[simu_name].run()\n# endregion\n")),(0,r.kt)("h4",{id:"113-run-and-extract-results"},"1.13 Run and Extract Results"),(0,r.kt)("div",{class:"text-justify"},(0,r.kt)("p",null,"Extract data using ",(0,r.kt)("inlineCode",{parentName:"p"},"extract"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," is the calculation result data, ",(0,r.kt)("inlineCode",{parentName:"p"},"savepath")," is the storage path, ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," is the classification of the data, and ",(0,r.kt)("inlineCode",{parentName:"p"},"monitor_name")," is the name of the monitor. The data extraction reference is as follows.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# region --- 11. See Results ---\nif run_options.extract:\n\n    if run_options.run_fde:\n        k = kL[1]\n        res = results.extract(data=\"calculate_modes\", savepath=f\"{plot_path}{k}_neff_table\", export_csv=True)\n        print(res.to_string(index=False))\n        for m in range(len(res)):\n            k = kL[2]\n            results.extract(data=\"calculate_modes\", savepath=f\"{plot_path}{k}_mode{m}\",\n                                attribute=\"Ey\", mode=m, real=True, imag=False, **export_options, show=False)\n\n    if run_options.run_fdtd:\n\n        res = results.extract(data='fdtd:power_monitor', savepath=f'{plot_path}{kL[3]}_profile',\n                        monitor_name='x_normal', target='line', plot_x='wavelength', attribute='T', real=True, imag=False, **export_options, show=False)\n        res = results.extract(data='fdtd:power_monitor', savepath=f'{plot_path}{kL[4]}_profile',\n                        monitor_name='z_normal', target='intensity', plot_x='x', plot_y='y', attribute='E', real=True, imag=True, **export_options, show=False)\n# endregion\n\n")),(0,r.kt)("h4",{id:"114-control-switch"},"1.14 Control Switch"),(0,r.kt)("p",null,'We can control the operation of the simulation by passing in bool values through tuple, as shown in the following code. In every simulation, only one solver will be enabled. When using the FDE solver, set "run_fde" to True and "run_fdtd" to False; When using the FDTD solver, set "run_fdtd" to True and "run_fde" to False.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class RunOptions(NamedTuple):\n    index_preview: bool\n    run_fde: bool\n    run_fdtd: bool\n    extract: bool\n\nif __name__ == "__main__":\n    simulation( \n            run_mode="local", wavelength=1.55, grid=0.01, grids_per_lambda=14, number_of_trial_modes=5, \n               run_options=RunOptions(index_preview=False,run_fde=False,run_fdtd=True,extract=True))\n\n')),(0,r.kt)("h3",{id:"2-output-results"},"2. Output results"),(0,r.kt)("h4",{id:"length-of-ring"},"Length of ring"),(0,r.kt)("p",null,"\u5fae\u73af\u8c10\u632f\u5668\u7684\u7406\u8bba\u56fe\u5982\u4e0b\u6240\u793a\uff0c\u5728\u6ce2\u5bfc\u4e2d\u4f20\u8f93\u7684\u5149\u573a\u4f1a\u5728\u5176\u8868\u9762\u9644\u8fd1\u4ea7\u751f\u500f\u901d\u573a\uff0c\u80fd\u91cf\u4f1a\u8026\u5408\u8fdb\u5165\u9760\u8fd1\u6ce2\u5bfc\u7684\u5fae\u73af\u4e2d\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5fae\u73af\u8c10\u632f\u5668\u8bbe\u8ba1\u4e00\u4e2aFSR\u4e3a30nm\u7684\u6ee4\u6ce2\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5982\u4e0b\u516c\u5f0f\u8ba1\u7b97\u51fa\u5fae\u73af\u7684\u6709\u6548\u5468\u957f\u3002\u53ef\u4ee5\u5229\u7528FDE\u6c42\u89e3\u5668\u8ba1\u7b97\u6ce2\u5bfc\u7684\u7fa4\u6298\u5c04\u7387\uff0c\u4e0b\u8868\u663e\u793a\u6ce2\u5bfc\u6a2a\u622a\u9762\u5728\u6ce2\u957f\u4e3a1.55um\u7684\u524d\u4e09\u4e2a\u6a21\u5f0f\u7684\u7fa4\u6298\u5c04\u7387\u3002"),(0,r.kt)(l.BlockMath,{math:" 2{\\pi}R= {\\lambda}^2/(FSR*n_g)",mdxType:"BlockMath"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"order"),(0,r.kt)("th",{parentName:"tr",align:null},"TEratio"),(0,r.kt)("th",{parentName:"tr",align:null},"neff_real"),(0,r.kt)("th",{parentName:"tr",align:null},"neff_imag"),(0,r.kt)("th",{parentName:"tr",align:null},"ng_real"),(0,r.kt)("th",{parentName:"tr",align:null},"ng_imag"),(0,r.kt)("th",{parentName:"tr",align:null},"wavelength_nm"),(0,r.kt)("th",{parentName:"tr",align:null},"loss_dBpcm"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0.966627"),(0,r.kt)("td",{parentName:"tr",align:null},"2.227503"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"4.434594"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"1550.0"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.046759"),(0,r.kt)("td",{parentName:"tr",align:null},"1.692711"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"3.467810"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"1550.0"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"0.599748"),(0,r.kt)("td",{parentName:"tr",align:null},"1.430406"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"1.683888"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"1550.0"),(0,r.kt)("td",{parentName:"tr",align:null},"0")))),(0,r.kt)("p",null,"\u8003\u8651TE\u504f\u632f\u7684\u57fa\u819c\u7684\u4f20\u8f93\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5f97\u52304.43\u7684\u7fa4\u6298\u5c04\u7387\uff0c\u4ee3\u5165\u516c\u5f0f\u5f97\u5230\u73af\u7684\u534a\u5f84\u8fd1\u4f3c\u4e3a2.7um\u3002"),(0,r.kt)("h4",{id:"couple-length-and-gap"},"Couple length and gap"),(0,r.kt)("p",null,"\u6839\u636e\u5bf9\u79f0\u6a21\u5f0f\u4e0e\u53cd\u5bf9\u79f0\u6a21\u5f0f\u7684\u6709\u6548\u6298\u5c04\u7387\u5dee\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8026\u5408\u533a\u57df\u7684\u957f\u5ea6\uff0c\u516c\u5f0f\u5982\u4e0b\u6240\u793a\u3002\u8bbe\u7f6e\u76f4\u6ce2\u5bfc\u4e0e\u5fae\u73af\u7684\u95f4\u9699\u4e3a100nm\uff0c\u53ef\u4ee5\u6ee1\u8db3\u6ce2\u5bfc\u4e0e\u5fae\u73af\u4e4b\u95f4\u7684\u8026\u5408\u3002\u4f7f\u7528FDE\u6c42\u89e3\u5668\u8ba1\u7b97\u6ce2\u5bfc\u4e0e\u5fae\u73af\u8026\u5408\u533a\u57df\u7684\u6709\u6548\u6298\u5c04\u7387\uff0c\u5bf9\u5e94\u7684\u6a21\u5f0f\u5206\u5e03\u5982\u4e0b\u3002"),(0,r.kt)(l.BlockMath,{math:"L={\\lambda}/({\\pi}{\\Delta}n)sin^{-1}(|t12|)",mdxType:"BlockMath"}),"\u5728\u6ce2\u957f\u4e3a1.55um\u8ba1\u7b97\u5f97\u5230\u7684\u8026\u5408\u8ddd\u79bb\u4e3aum\u3002\u8026\u5408\u8ddd\u79bb\u592a\u957f\u7684\u8bbe\u8ba1\u663e\u7136\u4e0d\u5408\u7406\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u76f4\u6ce2\u5bfc\u53d8\u4e3a\u5f2f\u66f2\u6ce2\u5bfc\u6216\u5c06\u5706\u73af\u7684\u534a\u5f84\u589e\u5927\u6765\u51cf\u5c0f\u8026\u5408\u957f\u5ea6\u3002\u6211\u4eec\u9009\u62e9\u5c06\u8026\u5408\u8ddd\u79bb\u8bbe\u7f6e\u4e3a\u96f6\uff0c\u901a\u8fc7\u589e\u5927\u534a\u5f84\u83b7\u5f97\u8db3\u591f\u7684\u8026\u5408\u957f\u5ea6\u548c\u671f\u671b\u7684\u73af\u957f\u3002",(0,r.kt)("h4",{id:"transmission"},"transmission"),(0,r.kt)("p",null,"\u4f7f\u75283D\u7684FDTD\u8ba1\u7b97\u76f4\u6ce2\u5bfc\u8026\u5408\u5230\u534a\u5f84\u4e3a2.8um\u7684\u5fae\u73af\u7684\u8c10\u632f\u54cd\u5e94\u3002\u5728\u76f4\u6ce2\u5bfc\u4e2d\u6dfb\u52a0\u6a21\u5f0f\u5149\u6e90\u4e3a\u6ce2\u5bfc\u7684TE\u57fa\u819c\uff0c\u5e76\u4f7f\u7528\u529f\u7387\u76d1\u89c6\u5668\u67e5\u770b\u573a\u5206\u5e03\u548c\u900f\u5c04\u7387\u3002"),(0,r.kt)("p",null,"After the light that meets the resonance conditions is coupled from the waveguide into the ring resonator, it passes through the drop end. As shown in the figure below, there is the maximum electric field at the drop end at the resonant wavelength.\n",(0,r.kt)("img",{src:n(26234).Z,width:"11338",height:"4252"})),(0,r.kt)("p",null,"The transmittance of the drop end is shown in the following figure.\n",(0,r.kt)("img",{src:n(59859).Z,width:"5669",height:"2126"})),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("p",null,"Hammer, M. and Hiremath, K.R. and Stoffer, R. (2004) Analytical approaches to the description of optical microresonator devices. (Invited) In: Microresonators as Building Blocks for VLSI Photonics, 18-25 October 2003, Erice, Italy. pp. 48-71. AIP Conference Proceedings 709. Springer. ISSN 0094-243X ISBN 978-0-7354-0184-6."))}g.isMDXComponent=!0},59859:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/drop-2a16385ae6b4f502eb0e3a4ca13ff756.png"},98013:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/mr-e4b1e4645a9842620e37b2eb6622147d.png"},26234:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/mr_xy-170d30b708b1f4a939f54d19bae8ef4b.png"}}]);